{"version":3,"sources":["homepage/sketchpage/colorpicker.js","homepage/sketchpage/topbar.js","homepage/sketchpage/path.js","homepage/sketchpage/importedstroke.js","homepage/sketchpage/sketch.js","homepage/sketchpage/assets/paper.png","homepage/sketchpage/assets/pencil1loop.mp3","homepage/sketchpage/assets/pencil2loop.mp3","homepage/sketchpage/assets/pencil3loop.mp3","homepage/sketchpage/sketchpage.js","reportWebVitals.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","r","g","b","a","handleClick","setState","handleClose","handleChange","rgb","props","handleColorChange","styles","reactCSS","main","float","padding","width","height","borderRadius","background","this","swatch","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","style","FormControl","InputLabel","fontSize","onClick","onChange","React","Component","Topbar","changeMode","_","newMode","mode","handleStrokeSizeChange","event","strokeSize","target","value","changeStrokeSize","changeColor","id","ToggleButtonGroup","className","exclusive","aria-label","ToggleButton","drawMode","Tooltip","title","colorMode","eraseMode","moveMode","IconButton","undo","redo","clear","Select","Array","keys","map","num","MenuItem","Path","initialCoords","draw","idCreator","idStroke","status","idMovedFrom","created","timeStart","timeEnd","undone","pencilTextureToggle","pencilTexture","pathCoords","svgPath","opacity","options","linecap","linejoin","rendered","erased","movedFrom","drawn","polyline","fill","stroke","filter","coords","cloneDeep","x","y","push","plot","i","length","dmove","remove","sketchGroup","add","index","xy","str","pathCoordsAtIndex","cp1x","cp1y","cp2x","cp2y","skip1","skip2","path","smoothCoords","serializedPath","ImportedStroke","type","msg","node","outerHTML","strokeCopy","console","log","attr","Sketch","svg","clearedSketches","group","currentPath","undoIndex","clearUndoIndex","prevMouseLocation","currMouseLocation","beganHighlighting","userID","currStrokeID","originalWidth","getWidth","originalHeight","getHeight","updateDimensions","animationfinished","newPaths","paths","newPath","setPaths","slice","sketchpad","document","getElementById","clientWidth","clientHeight","n","toString","d","Date","addZero","getHours","getMinutes","getSeconds","getMilliseconds","serialized","getPaths","serialize","serializedSketch","deserialize","hasprettyStroke","scaleSketch","undefined","addToGroupSmoothed","find","el","bbox","snoopHeight","votebar","getClientRects","scale","Math","min","transform","cx","cy","relative","scaleX","scaleY","sketchType","text","move","xScaleFactor","yScaleFactor","updateOrigin","scaleFactor","targetPath","addToGroup","mouseX","mouseY","selected","select","updatePaths","setColor","clientX","clientY","rect","getBoundingClientRect","Number","isNaN","closest_distances","getClosestDistanceDrawnSVG","getClosestDistanceImportedSVG","min_distance","apply","indexOf","distances","sqrt","boundingRect","startsWith","changedTouches","newTargetPath","svgHolder","getHTML","children","getTime","highlight","saveData","concat","hide","show","webcamX","webcamY","addPoint","moveBy","json","strokeList","peekHighlighted","interaction","clearInterval","intvl","intvlTime","convertToMillisec","startPath","setInterval","time","l","split","parseInt","SketchPage","testicles","createRef","sketchMode","currSoundCount","currStroke","currColor","currStrokeSize","snackbarOpen","drawing","sketchSounds","Howl","src","Pencil1","loop","Pencil2","Pencil3","setBindings","verifyJSON","bind","isMobile","SVG","size","image","Paper","getElementsByTagName","Filter","turbulence","result","colorMatrix","composite","displacementMap","primarySketch","ServerSketch","primSket","window","addEventListener","e","handleKeyUp","handleKeyDown","preventDefault","prevX","prevY","erase","moving","startMove","body","continueLineWithEvent","count","floor","random","play","paperTextureSwitch","changeStrokeVolume","hoverStroke","persist","prevMouseEvent","method","handleMove","stop","finishPath","keyCode","ctrlKey","metaKey","shiftKey","currHoveredStroke","hex","svgString","XMLSerializer","serializeToString","blob","Blob","FileSaver","saveAs","input","sketch","file","files","name","endsWith","Promise","resolve","reader","FileReader","onload","readAsText","then","img","each","attributes","addImportedStroke","parentNode","removeChild","currX","touches","currY","clearTimeout","timeout","setTimeout","Howler","mute","displacement","pow","vol","round","fade","volume","JSON","parse","currStrokeCode","addPathFromCode","err","onMouseDown","handleMouseDown","onMouseMove","onMouseLeave","handleMouseUp","onMouseUp","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","Snackbar","open","autoHideDuration","onClose","severity","elevation","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.9420c202.chunk.js","sourcesContent":["import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport { SketchPicker } from 'react-color'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nexport class ColorPicker extends React.Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        color: {\r\n            r: '212',\r\n            g: '170',\r\n            b: '170',\r\n            a: '1',\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false })\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        this.setState({ color: color.rgb })\r\n        this.props.handleColorChange(color)\r\n    };\r\n\r\n    render() {\r\n\r\n        const styles = reactCSS({\r\n            'default': {\r\n                main: {\r\n                    float: 'left',\r\n                    padding: '10px'\r\n                },\r\n                color: {\r\n                    width: '36px',\r\n                    height: '14px',\r\n                    borderRadius: '2px',\r\n                    background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\r\n                },\r\n                swatch: {\r\n                    padding: '5px',\r\n                    background: '#fff',\r\n                    borderRadius: '1px',\r\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n                    display: 'inline-block',\r\n                    cursor: 'pointer'\r\n                },\r\n                popover: {\r\n                    position: 'absolute',\r\n                    zIndex: '2',\r\n                },\r\n                cover: {\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    right: '0px',\r\n                    bottom: '0px',\r\n                    left: '0px',\r\n                },\r\n            },\r\n        });\r\n\r\n        return (\r\n            <div style={styles.main}>\r\n                <FormControl>\r\n                    <InputLabel color=\"secondary\">  <div style={{fontSize: \"12px\"}}>Color</div>;</InputLabel>\r\n                    <div style={styles.swatch} onClick={this.handleClick}>\r\n                        <div style={styles.color} />\r\n                    </div>\r\n                </FormControl>\r\n                {this.state.displayColorPicker ? <div style={styles.popover}>\r\n                    <div style={styles.cover} onClick={this.handleClose} />\r\n                    <SketchPicker color={this.state.color} onChange={this.handleChange} />\r\n                </div> : null}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PanToolIcon from '@material-ui/icons/PanTool';\r\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport RedoIcon from '@material-ui/icons/Redo';\r\nimport DeleteSweepIcon from '@material-ui/icons/Clear';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport { ColorPicker } from './colorpicker';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\n\r\nimport './topbar.css'\r\n\r\nexport class Topbar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mode: \"draw\",\r\n            color: {\r\n                r: '0',\r\n                g: '0',\r\n                b: '0',\r\n                a: '1',\r\n              },\r\n            strokeSize: 4\r\n        }\r\n    }\r\n\r\n    changeMode = (_, newMode) => {\r\n        this.setState({ mode: newMode })\r\n    }\r\n\r\n    handleStrokeSizeChange = (event) => {\r\n        this.setState({ strokeSize: event.target.value })\r\n        this.props.changeStrokeSize(event.target.value)\r\n    }\r\n\r\n    handleColorChange = (color) => {\r\n        this.setState({ color: color.rgb })\r\n        this.props.changeColor(color)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"topbar\">\r\n                <ColorPicker handleColorChange={this.handleColorChange}/>\r\n                <ToggleButtonGroup className=\"float-btn\" value={this.state.mode} exclusive onChange={this.changeMode} aria-label=\"sketch mode\">\r\n                    <ToggleButton onClick={() => this.props.drawMode()} value=\"draw\" aria-label=\"draw mode\">\r\n                        <Tooltip title=\"Draw mode\">\r\n                            <CreateIcon />\r\n                        </Tooltip>\r\n                    </ToggleButton>\r\n                    <ToggleButton onClick={() => this.props.colorMode()} value=\"color\" aria-label=\"color mode\">\r\n                        <Tooltip title=\"Change Stroke Color\">\r\n                            <PaletteIcon />\r\n                        </Tooltip>\r\n                    </ToggleButton>\r\n                    <ToggleButton onClick={() => this.props.eraseMode()} value=\"erase\" aria-label=\"erase mode\">\r\n                        <Tooltip title=\"Erase mode\">\r\n                            <DeleteIcon />\r\n                        </Tooltip>\r\n                    </ToggleButton>\r\n                    <ToggleButton onClick={() => this.props.moveMode()} value=\"move\" aria-label=\"move mode\">\r\n                        <Tooltip title=\"Move mode\">\r\n                            <PanToolIcon style={{ height: 20 }} /></Tooltip>\r\n                    </ToggleButton>\r\n                </ToggleButtonGroup>\r\n                <Tooltip title=\"Undo\">\r\n                    <IconButton onClick={() => this.props.undo()} color=\"secondary\" aria-label=\"undo stroke\">\r\n                        <UndoIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Redo\">\r\n                    <IconButton onClick={() => this.props.redo()} color=\"secondary\" aria-label=\"redo stroke\">\r\n                        <RedoIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Clear drawing\">\r\n                    <IconButton onClick={() => this.props.clear()} color=\"secondary\" aria-label=\"clear drawing\">\r\n                        <DeleteSweepIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <FormControl>\r\n                    <InputLabel color=\"secondary\">Size</InputLabel>\r\n                    <Select\r\n                        color=\"secondary\"\r\n                        value={this.state.strokeSize}\r\n                        onChange={this.handleStrokeSizeChange}>\r\n                            {[...Array(60).keys()].map(\r\n                                (num) => \r\n                                <MenuItem value={num}>{num}</MenuItem>\r\n                            )}\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        )\r\n    }\r\n}","import _ from \"lodash\"\nimport 'svg.filter.js'\n\n/** Single stroke of a sketch. SVG implementation. */\nexport default class Path {\n  /**\n   * @param {string} color - the color of the path\n   * @param {number} width - the width of the path\n   * @param {object} initialCoords - the sketch that this path is contained in\n   * @param {object} draw - the svg draw object used to render this path\n   * @param {string} idCreator - the creator ID of the user who created the path\n   * @param {number} idStroke - the stroke ID of the path (starts at 1 and increments as each stroke is added)\n   * @param {number} status - number indicating the current status of the stroke (1 = 'drawn', 2 = 'erased', 3 = 'moved')\n   * @param {number} idMovedFrom - the id of the stroke this stroke was moved from (not moved = 0)\n   * @param {number} created - number indicating how the stroke was created (1 = 'drawn', 2 = 'moved', 3 = 'copied')\n   * @param {string} timeStart - time when interaction with this stroke started (hh:mm:ss:ms)\n   * @param {string} timeEnd - time when interaction with this stroke ended (hh:mm:ss:ms)\n   * @param {boolean} pencilTextureToggle - boolean to indicate whether the stroke has a pencil texture\n   * @param {object} pencilTexture - the pencil texture SVG filter\n   * pencil texture modified from https://heredragonsabound.blogspot.com/2020/02/creating-pencil-effect-in-svg.html\n   */\n  constructor(color, width, initialCoords, draw, idCreator, idStroke, status, idMovedFrom,\n    created, timeStart, timeEnd, undone, pencilTextureToggle, pencilTexture) {\n    this.pathCoords = initialCoords  // Flattened array of points, stored as [x1, y1, x2, y2, ...]\n    this.svgPath = null\n\n    this.color = color\n    this.width = width\n    this.opacity = 1\n    this.draw = draw\n    this.options = { width: this.width, color: this.color, opacity: this.opacity, linecap: 'round', linejoin: 'round'}\n    this.rendered = true\n    this.erased = false\n    this.idCreator = idCreator\n    this.idStroke = idStroke\n    this.status = status \n    this.idMovedFrom = idMovedFrom \n    this.movedFrom = null\n    this.created = created \n    this.timeStart = timeStart\n    this.timeEnd = timeEnd\n    this.pencilTextureToggle = pencilTextureToggle\n    this.pencilTexture = pencilTexture\n    this.drawn = true\n    this.undone = undone\n\n    this.svgPath = this.draw.polyline(this.pathCoords).fill('none')\n        .stroke(this.options)\n    if (this.pencilTextureToggle) { // if stroke is on paper texture, adopt a pencil texture\n      this.svgPath.filter(this.pencilTexture)\n    }\n  }\n\n  /**\n   * Converts this path into a plain object.\n   * @return {object} object containing keys:\n   *\n   */\n  serialize() {\n    let coordscopy = _.cloneDeep(this.pathCoords)\n    return {\n      coords: coordscopy,\n      color: this.color,\n      width: this.width,\n      idCreator: this.idCreator,\n      idStroke: this.idStroke,\n      status: this.status,\n      idMovedFrom: this.idMovedFrom,\n      created: this.created,\n      timeStart: this.timeStart,\n      timeEnd: this.timeEnd,\n      undone: this.undone,\n      // pencilTextureToggle: this.pencilTextureToggle\n    }\n  }\n\n  /**\n   *\n   * @param {object} serializedPath\n   * @param {object} draw\n   * @return {Path} the deserialized path\n   */\n  static deserialize(serializedPath, draw, pencilTexture) {\n    return new Path(serializedPath.color, serializedPath.width, serializedPath.coords, draw, \n      serializedPath.idCreator, serializedPath.idStroke, serializedPath.status, serializedPath.idMovedFrom,\n      serializedPath.created, serializedPath.timeStart, serializedPath.timeEnd, serializedPath.undone, serializedPath.pencilTextureToggle, pencilTexture)\n  }\n\n  /**\n   * Adds a point to the path and renders it.\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  addPoint(x, y) {\n    this.pathCoords.push(x)\n    this.pathCoords.push(y)\n    this.svgPath.plot(this.pathCoords)\n  }\n  /**\n   * Moves the path by a certain displacement.\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  moveBy(x, y) {\n    for (let i = 0; i < this.pathCoords.length; i++) {\n      this.pathCoords[i] = (i % 2 === 0) ? this.pathCoords[i] + x : this.pathCoords[i] + y\n    }\n    this.svgPath.dmove(x, y)\n  }\n\n  /**\n   * \"Highlights\" the path by changing its opacity.\n   */\n  highlight() {\n    this.svgPath.opacity(this.opacity)\n  }\n\n  /**\n   * Changes the color of the path\n   * @param {string} color \n   */\n  setColor(color) {\n    this.color = color\n    this.svgPath.stroke({color: color})\n  }\n\n  /**\n   * Stop rendering this path on the SVG.\n   */\n  remove(status) {\n    this.svgPath.remove()\n    this.rendered = false\n    this.status = status\n    if (status === 2) {\n      this.erased = true\n    }\n  }\n\n  /**\n   * Adds this path to the group so it can be rendered.\n   *\n   * @param {object} sketchGroup\n   */\n  addToGroup(sketchGroup) {\n    sketchGroup.add(this.svgPath)\n    this.rendered = true\n    this.status = 1\n  }\n\n  pathCoordsAtIndex(coords, index, xy) {\n    return coords[index * 2 + xy]\n  }\n\n  smoothCoords(coords) {\n    let str = ''\n    str += ('M ' + this.pathCoordsAtIndex(coords, 0, 0) + ' ' + this.pathCoordsAtIndex(coords, 0, 1) + ' ')\n    let skip1 = true\n    let skip2 = false\n    let cp1x, cp1y, cp2x, cp2y\n    for (let i = 0; i < coords.length / 2 - 1; i++) {\n      if (skip1) {\n        cp1x = this.pathCoordsAtIndex(coords, i, 0) // x\n        cp1y = this.pathCoordsAtIndex(coords, i, 1) // y\n        skip1 = false\n        skip2 = true\n      }\n      if (skip2) {\n        cp2x = this.pathCoordsAtIndex(coords, i, 0) // x\n        cp2y = this.pathCoordsAtIndex(coords, i, 1) // y\n\n        skip1 = false\n        skip2 = false\n      } else {\n        str += 'C ' + cp1x + ' ' + cp1y + ' ' + cp2x + ' ' + cp2y + ' ' +\n          this.pathCoordsAtIndex(coords, i, 0) + ' ' + this.pathCoordsAtIndex(coords, i, 1) + ' '\n        skip1 = true\n        skip2 = false\n      }\n    }\n    return str\n  }\n\n  addToGroupSmoothed(sketchGroup) {\n    this.svgPath.remove()\n    let path = this.draw.path(this.smoothCoords(this.pathCoords))\n        .fill('none')\n        .stroke(this.options)\n    if (this.pencilTextureToggle) {\n      path.filter(this.pencilTexture)\n    }\n    this.svgPath = path\n    sketchGroup.add(path)\n  }\n}\n","import _ from \"lodash\"\n\nexport default class ImportedStroke {\n    /**\n     * @param {object} draw - the svg draw object used to render this stroke\n     * @param {object} stroke - the stroke object\n     * @param {string} idCreator - the creator ID of the user who created the path\n     * @param {number} idStroke - the stroke ID of the path (starts at 1 and increments as each stroke is added)\n     * @param {number} status - number indicating the current status of the stroke (1 = 'drawn', 2 = 'erased', 3 = 'moved')\n     */\n    constructor(draw, stroke, idCreator, idStroke, status) {\n        this.type = stroke.type\n        this.drawn = false\n        this.draw = draw\n        this.stroke = stroke\n        this.rendered = true\n        this.idCreator = idCreator\n        this.idStroke = idStroke\n        this.status = status\n        this.opacity = 1\n        this.movedFrom = null\n    }\n\n    /**\n     * Converts this path into a plain object.\n     * @return {object} object containing keys:\n     *\n     */\n    serialize() {\n        return {\n            msg: 'placeholder text',\n            type: this.type,\n            status: this.status\n        }\n    }\n\n    getHTML() {\n        return this.stroke.node.outerHTML\n    }\n\n    copy() {\n        let strokeCopy = _.cloneDeep(this.stroke)\n        return new ImportedStroke(this.draw, strokeCopy, this.idCreator, this.idStroke, this.status)\n    }\n\n    /**\n     * Moves the path by a certain displacement.\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n    moveBy(x, y) {\n        this.stroke.dmove(x, y)\n    }\n\n    /**\n     * \"Highlights\" the path by changing its opacity.\n     */\n    highlight() {\n        this.stroke.opacity(this.opacity)\n    }\n\n    /**\n     * Changes the color of the stroke\n     * @param {string} color \n     */\n    setColor(color) {\n        this.color = color\n        console.log(this.stroke.attr('stroke'))\n        console.log(this.stroke.attr('fill'))\n        if (this.stroke.attr('stroke') !== \"#000000\" && this.stroke.attr('stroke') !== \"none\") {\n            this.stroke.stroke({color: color})\n        }\n        if (this.stroke.attr('fill') !== \"#000000\" && this.stroke.attr('fill') !== \"none\" ) {\n            this.stroke.fill({color: color})\n        }\n    }\n\n    /**\n     * Stop rendering this path on the SVG.\n     */\n    remove(status) {\n        this.stroke.remove()\n        this.rendered = false\n        this.status = status\n        if (status === 2) {\n            this.erased = true\n        }\n    }\n\n    /**\n     * Adds this path to the group so it can be rendered.\n     *\n     * @param {object} sketchGroup\n     */\n    addToGroup(sketchGroup) {\n        sketchGroup.add(this.stroke)\n        this.rendered = true\n        this.status = 1\n    }\n}","/** A collection of path. Keeps track of a undo and redo buffer. */\nimport Path from './path'\nimport ImportedStroke from './importedstroke'\n\nexport default class Sketch {\n  /**\n   * @param {object} draw - the SVG draw object\n   * @param {object} svg - the svg element\n   * @param {object} pencilTexture - the pencil texture SVG filter\n   */\n  constructor(draw, svg, pencilTexture) {\n    // this.paths = []\n    this.clearedSketches = [[]] // Stores current sketch and all cleared sketches for undoing and redoing clears.\n    this.sketchGroup = draw.group()\n    this.draw = draw\n    this.currentPath = null\n    this.undoIndex = 0\n    this.clearUndoIndex = 0\n    this.svg = svg\n    this.prevMouseLocation = null\n    this.currMouseLocation = null\n    this.beganHighlighting = false\n    this.userID = null\n    this.currStrokeID = 1\n    this.pencilTexture = pencilTexture\n\n    this.originalWidth = this.getWidth()\n    this.originalHeight = this.getHeight()\n    this.updateDimensions()\n    this.animationfinished = true\n  }\n\n  getPaths() {\n    return this.clearedSketches[this.clearedSketches.length - this.clearUndoIndex - 1]\n  }\n\n  setPaths(newPaths) {\n    this.clearedSketches[this.clearedSketches.length - this.clearUndoIndex - 1] = newPaths\n  }\n\n  updatePaths(paths, newPath) {\n    paths.push(newPath)\n    this.setPaths(paths)\n    this.clearedSketches = this.clearedSketches.slice(0, this.clearedSketches.length - this.clearUndoIndex)\n    this.undoIndex = 0\n    this.clearUndoIndex = 0\n  }\n\n  getWidth() {\n    let sketchpad = document.getElementById('sketchpad')\n    if (sketchpad !== null) {\n      return sketchpad.clientWidth\n    }\n    return this.svg.clientWidth\n  }\n\n  getHeight() {\n    let sketchpad = document.getElementById('sketchpad')\n    if (sketchpad !== null) {\n      return sketchpad.clientHeight\n    }\n    return this.svg.clientHeight\n  }\n\n  addZero(x, n) {\n    while (x.toString().length < n) {\n      x = \"0\" + x;\n    }\n    return x;\n  }\n\n  getTime() {\n    let d  = new Date()\n    let h = this.addZero(d.getHours(), 2)\n    let m = this.addZero(d.getMinutes(), 2)\n    let s = this.addZero(d.getSeconds(), 2)\n    let ms = this.addZero(d.getMilliseconds(), 3)\n    return h + \":\" + m + \":\" + s + \":\" + ms\n  }\n\n  /**\n   * Serialize a path into an array of objects\n   * @return {Array}\n   */\n  serialize() {\n    let serialized = []\n    let paths = this.getPaths()\n    for (let i = 0; i < paths.length - this.undoIndex; i++) {\n      serialized.push(paths[i].serialize())\n    }\n    return serialized\n  }\n\n  /**\n   * Loads in a serialized sketch.\n   * @param {Object} serializedSketch\n   */\n  loadSketch(serializedSketch) {\n    this.remove()\n    this.setPaths([])\n    for (let serializedPath of serializedSketch) {\n      if (serializedPath.status === 1) {\n        let path = Path.deserialize(serializedPath, this.draw, this.pencilTexture)\n        if (path !== null ) {\n          path.hasprettyStroke = false\n          if(path.status!==1)path.rendered = false\n          this.getPaths().push(path)\n        }\n      }\n    }\n  }\n\n  displayLoadedSketch(scaleSketch) {\n    scaleSketch = scaleSketch === undefined ? true : scaleSketch\n    this.sketchGroup.remove()\n    this.sketchGroup = this.draw.group()\n    if (!scaleSketch) {\n      this.updateDimensions()\n    }\n\n    for (let path of this.getPaths()) {\n      path.addToGroupSmoothed(this.sketchGroup)\n      if(path.status!==1)path.remove(path.status)\n      if(path.created===\"move\"){\n        path.movedFrom = this.getPaths().find(el => el.idStroke === path.idMovedFrom)\n      }\n    }\n    let width = this.getWidth()\n    let height = this.getHeight()\n\n    if (!scaleSketch) {\n      return\n    }\n\n    // scale snooped sketch to fit.\n    let bbox = this.sketchGroup.bbox()\n\n    let snoopHeight = height\n    let votebar = document.getElementById('votebar')\n    if (votebar !== null) {\n      snoopHeight = snoopHeight - votebar.getClientRects()[0].height\n    }\n    let scale = Math.min(width / bbox.width, snoopHeight / bbox.height)\n\n    this.sketchGroup.transform({ // Center peeked sketch\n      x: width / 2 - bbox.cx,\n      y: snoopHeight / 2 - bbox.cy,\n      relative: true,\n    })\n    this.sketchGroup.transform({\n      scaleX: scale * 0.8, // Include some padding\n      scaleY: scale * 0.8,\n    })\n  }\n\n  /**\n   * Used on the adminpage to indicate which sketches are blank or peek-only\n   */\n  displayText(sketchType) {\n    var text\n    if (sketchType === \"peek\") {\n      text = this.draw.text(\"User has only peeked so far.\")\n      text.move(20,70)\n    }\n    else {\n      text = this.draw.text(\"User has not sketched \\nnor peeked so far.\")\n      text.move(40,70)\n    }\n    this.sketchGroup = text\n  }\n\n  /**\n   * Reset the origin to the center of image and scale sketch to fit screen, assuming it fit in original width and\n   * height.\n   */\n  updateDimensions() {\n    let xScaleFactor = (this.getWidth() / this.originalWidth)\n    let yScaleFactor = (this.getHeight() / this.originalHeight)\n\n    this.updateOrigin()\n    let scaleFactor = Math.min(xScaleFactor, yScaleFactor)\n\n    this.sketchGroup.transform({\n      scale: scaleFactor,\n      cx: 0,\n      cy: 0,\n    })\n  }\n\n  updateOrigin() {\n    this.sketchGroup.transform({\n      scale: 1,\n    })\n    this.sketchGroup.transform({\n      x: this.getWidth() / 2,\n      y: this.getHeight() / 2,\n    })\n  }\n\n  /**\n   * Undo an operation (erase, move, draw, clear)\n   */\n  undo(targetPath) {\n    if (this.undoIndex < this.getPaths().length) {\n      // let targetPath = this.getPaths()[this.getPaths().length - this.undoIndex - 1]//want to change this target\n      if(!targetPath)return false;\n      if (targetPath.status === 2 && !targetPath.rendered && targetPath.erased) { // undo erase\n        targetPath.addToGroup(this.sketchGroup)\n      }\n      else if (targetPath.rendered && targetPath.movedFrom !== null && !targetPath.movedFrom.rendered) { //undo move\n        targetPath.remove(3)\n        targetPath.movedFrom.addToGroup(this.sketchGroup)\n      }\n      else { //undo draw\n        targetPath.remove(2)\n      }\n      this.undoIndex += 1\n    } else if (this.clearUndoIndex < this.clearedSketches.length - 1) { // Undoing a clear\n      this.undoIndex = 0\n      this.clearUndoIndex += 1\n      for (let path of this.getPaths()) {\n        if (path.rendered) {\n          path.addToGroup(this.sketchGroup)\n        }\n      }\n    } else {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Redo an operation (erase, move, draw, clear)\n   */\n  redo() {\n    if (this.undoIndex > 0) {\n      let targetPath = this.getPaths()[this.getPaths().length - this.undoIndex]\n      if (targetPath.rendered && targetPath.erased) { // redo erase\n        targetPath.remove()\n      }\n      else if (!targetPath.rendered && targetPath.movedFrom !== null && targetPath.movedFrom.rendered) { //redo move\n        targetPath.addToGroup(this.sketchGroup) \n        targetPath.movedFrom.remove(3)\n      }\n      else { //redo draw\n        targetPath.addToGroup(this.sketchGroup)\n      }\n      this.undoIndex -= 1\n    } else if (this.clearUndoIndex > 0) { //redo clear\n      this.remove()\n      this.clearUndoIndex -= 1\n      this.undoIndex = this.getPaths().length\n    } else {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Clears all strokes\n   */\n  clear() {\n    if (this.getPaths().length === 0) {\n      return false\n    }\n    this.setPaths(this.getPaths().slice(0, this.getPaths().length - this.undoIndex))\n    this.clearedSketches = this.clearedSketches.slice(0, this.clearedSketches.length - this.clearUndoIndex)\n    this.clearUndoIndex = 0\n    this.undoIndex = 0\n    this.remove()\n    this.clearedSketches.push([])\n    return true\n  }\n\n  /**\n   * Visually removes the sketch group\n   */\n  remove() {\n    this.sketchGroup.remove()\n    this.sketchGroup = this.draw.group()\n    this.updateDimensions()\n  }\n\n  /**\n   * Erases a stroke by making a copy of the stroke and hiding both\n   */\n  erase(mouseX, mouseY) {\n    let selected = this.select(mouseX, mouseY)\n    if (typeof selected !== 'undefined') {\n      let paths = selected[0]\n      let targetPath = selected[1]\n      targetPath.remove(2)\n      this.updatePaths(paths, targetPath)\n      // this.ecThis=targetPath\n      return true\n    }\n    return false\n  }\n\n\n  color(mouseX, mouseY, color) {\n    let selected = this.select(mouseX, mouseY)\n    if (typeof selected !== 'undefined') {\n      let targetPath = selected[1]\n      targetPath.setColor(color)\n      // this.ecThis=targetPath\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Selects the stroke closest to mouse position\n   */\n  select(clientX, clientY) {\n    if (this.getPaths().length > 0) {\n      let rect = this.svg.getBoundingClientRect()\n      let transform = this.sketchGroup.transform()\n      let mouseX = ((clientX - rect.left) - transform.x) / transform.scaleX\n      let mouseY = ((clientY - rect.top) - transform.y) / transform.scaleY\n      this.prevMouseLocation = [mouseX, mouseY]\n      this.currMouseLocation = [mouseX, mouseY]\n      if (!Number.isNaN(mouseX) && !Number.isNaN(mouseY)) {\n        let buffer = 40\n        let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n        let closest_distances = []\n        for (let i = 0; i < paths.length; i++) {\n          if (paths[i].status === 1) {\n            if (paths[i].drawn) {\n              closest_distances.push(this.getClosestDistanceDrawnSVG(paths[i].pathCoords, mouseX, mouseY))\n            }\n            else {\n              closest_distances.push(this.getClosestDistanceImportedSVG(\n                paths[i].stroke.node.getBoundingClientRect(), clientX, clientY)\n              )\n            }\n          }\n          else {\n            closest_distances.push(9999)\n          }\n        }\n        let min_distance = Math.min.apply(null, closest_distances)\n        if (min_distance < buffer) {\n          return [paths, paths[closest_distances.indexOf(min_distance)]]\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a list of stroke coords, find the minimum distance between any point in the list and mouse position\n   */\n  getClosestDistanceDrawnSVG(coords, mouseX, mouseY) {\n    var distances = []\n    for (let i = 0; i < coords.length; i+=2) {\n      let x = coords[i] - mouseX\n      let y = coords[i+1] - mouseY\n      distances.push(Math.sqrt(x*x + y*y))\n    }\n    return Math.min.apply(null, distances)\n  }\n\n  getClosestDistanceImportedSVG(boundingRect, mouseX, mouseY) {\n    var distances = []\n    for (let width = 0; width < boundingRect.width; width++) {\n      for (let height = 0; height < boundingRect.height; height++) {\n        let x = boundingRect.x + width - mouseX\n        let y = boundingRect.y + height - mouseY\n        distances.push(Math.sqrt(x*x + y*y))\n      }\n    }\n    return Math.min.apply(null, distances)\n  }\n\n  /**\n   * Starts moving the stroke closest to mouse position by \n   * - Making a copy of the stroke\n   * - Hiding the original stroke\n   * - Setting the copied stroke as the one targetted for moving\n   */\n  startMove(event) {\n    if (event.type.startsWith('touch')) {\n      event = event.changedTouches[0]\n    }\n    let selected = this.select(event.clientX, event.clientY)\n    if (typeof selected !== 'undefined') {\n      // makes (unrendered) copy of target path for future undo and adds to stack \n      let paths = selected[0]\n      let targetPath = selected[1]\n      let newTargetPath\n      if (targetPath.drawn) {\n        newTargetPath = Path.deserialize(targetPath.serialize(), this.draw, this.pencilTexture)\n        newTargetPath.addToGroupSmoothed(this.sketchGroup) // necessary, otherwise copied path off position\n      }\n      else {\n        let svgHolder = this.draw.svg(targetPath.getHTML())\n        newTargetPath = new ImportedStroke(this.draw, svgHolder.children()[3], this.userID, this.currStrokeID, 1)\n        newTargetPath.addToGroup(this.sketchGroup)\n      }\n      newTargetPath.timeStart = this.getTime()\n      newTargetPath.idStroke = this.currStrokeID\n      newTargetPath.pencilTextureToggle = targetPath.pencilTextureToggle\n      newTargetPath.created = 2\n      newTargetPath.idMovedFrom = targetPath.idStroke\n      newTargetPath.movedFrom = targetPath\n      targetPath.remove(3)\n      this.currStrokeID += 1\n      newTargetPath.opacity = 0.1\n      newTargetPath.highlight()\n      this.updatePaths(paths, newTargetPath)\n      this.currentPath = newTargetPath\n      return true\n    }\n    return false\n  }\n\n  endMove() {\n    this.currentPath.opacity = 1\n    this.currentPath.highlight()\n    this.currentPath.timeEnd = this.getTime()\n    let saveData = this.prevMouseLocation.concat(this.currMouseLocation)\n    this.currMouseLocation = null\n    return saveData\n  }\n\n  hide() {\n    this.sketchGroup.hide()\n  }\n\n  show() {\n    this.sketchGroup.show()\n  }\n\n  /**\n   * Depending on mode, adds a point onto the current or moves path\n   * @param {object} event\n   * @param {string} mode\n   */\n  continueLineWithEvent(event, mode, webcamX, webcamY) {\n    let rect = this.svg.getBoundingClientRect()\n    let x\n    let y\n    let transform = this.sketchGroup.transform()\n    // Transform coordinates on svg div to center origin coordinates of sketchGroup\n    if (event === null) {\n      x = ((webcamX - rect.left) - transform.x) / transform.scaleX\n      y = ((webcamY - rect.top) - transform.y) / transform.scaleY\n    }\n    else {\n      if (event.type.startsWith('touch')) {\n        event = event.changedTouches[0]\n      }\n      x = ((event.clientX - rect.left) - transform.x) / transform.scaleX\n      y = ((event.clientY - rect.top) - transform.y) / transform.scaleY\n    }\n\n    if (mode === 'draw') {\n      this.currentPath.addPoint(x, y) //could upload to database here as it draws, continuously replacing the path in the database\n      // this.sketchEdit('point')\n    }\n    else if (mode === 'move') {\n      if (this.currMouseLocation !== null) {\n        this.currentPath.moveBy(x - this.currMouseLocation[0], y - this.currMouseLocation[1])\n        this.currMouseLocation = [x, y]\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {string} color\n   * @param {number} width\n   * @param {boolean} pencilTextureToggle\n   */\n  startPath(color, width, pencilTextureToggle) {\n    this.currentPath = new Path(color, width, [], this.draw, this.userID, this.currStrokeID, 1, 0, 1, \"\", \"\", false, pencilTextureToggle, this.pencilTexture)\n    this.currStrokeID += 1\n    this.currentPath.addToGroup(this.sketchGroup)\n    this.currentPath.timeStart = this.getTime()\n  }\n\n  /**\n   * Adds the current path to the list of other paths.\n   */\n  finishPath() {\n    this.currentPath.timeEnd = this.getTime()\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    this.updatePaths(paths, this.currentPath)\n    this.currentPath.addToGroupSmoothed(this.sketchGroup)\n    //this.currentPath = null\n  }\n\n  /**\n   * Add new path based on JSON specifications\n   * @param {*} json \n   */\n  addPathFromCode(json) {\n    let newTargetPath = Path.deserialize(json, this.draw, this.pencilTexture)\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    let targetPath = this.currentPath\n    newTargetPath.idStroke = this.currStrokeID\n    newTargetPath.pencilTextureToggle = targetPath.pencilTextureToggle\n    newTargetPath.created = 2\n    this.currStrokeID += 1\n    newTargetPath.idMovedFrom = targetPath.idStroke\n    newTargetPath.movedFrom = targetPath\n    newTargetPath.hasprettyStroke = false\n    targetPath.remove(3)\n    newTargetPath.addToGroupSmoothed(this.sketchGroup) // necessary, otherwise copied path off position\n    newTargetPath.timeStart = this.getTime()\n    this.updatePaths(paths, newTargetPath)\n    this.currentPath = newTargetPath\n  }\n\n  /**\n   * Highlight the stroke closest to mouse position\n   */\n  highlightPeekedStroke(event) {\n    let selected = this.select(event.clientX, event.clientY)\n    if (typeof selected !== 'undefined') {\n      selected[1].highlight()\n      this.beganHighlighting = true\n    }\n  }\n\n  /**\n   * Returns all highlighted strokes\n   */\n  getHighlightedPeekedStrokes() {\n    let strokeList = []\n    for (let path of this.getPaths()) {\n      if (path.peekHighlighted) {\n        strokeList.push(path)\n      }\n    }\n    return strokeList\n  }\n\n  /**\n   * Create a pseudo animation for drawing by gradually creating a path with same coordinates as most recent path, then deleting that path\n   * @param {string} interaction\n   */\n  animateNewPeekedStroke(interaction) {\n    if (interaction !== 'sketch') {\n      return\n    }\n    let paths = this.getPaths()\n    let path = paths[paths.length - 1]\n    if (path.created === 1 && path.status === 1) {\n      if (!this.animationfinished) {\n        this.currentPath.remove(2)\n        path.addToGroup(this.sketchGroup)\n        this.animationfinished = true\n        clearInterval(this.intvl)\n      }\n      this.animationfinished = false\n      path.remove(2)\n      let totalTime = this.convertToMillisec(path.timeEnd) - this.convertToMillisec(path.timeStart)\n      let intvlTime = totalTime/(path.pathCoords.length/2)\n      let i = 0\n      this.startPath(path.color, path.width, path.pencilTextureToggle, this.pencilTexture)\n      this.intvl = setInterval(() => {\n        if (i >= path.pathCoords.length) {\n          this.currentPath.addToGroupSmoothed(this.sketchGroup)\n          this.currentPath.remove(2)\n          path.addToGroup(this.sketchGroup)\n          this.animationfinished = true\n          clearInterval(this.intvl)\n        }\n        else {\n          this.currentPath.addPoint(path.pathCoords[i], path.pathCoords[i+1])\n          i += 2\n        }\n      }, intvlTime)\n    }\n  }\n\n  /**\n   * Converts time with format (hh:mm:ss:ms) into milliseconds\n   * @param {string} time \n   */\n  convertToMillisec(time){\n    let l = time.split(\":\")\n    return (parseInt(l[0]*3600000) + parseInt(l[1]*60000) + parseInt(l[2]*1000) + parseInt(l[3]))\n  }\n\n  addImportedStroke(stroke) {\n    this.currentPath = new ImportedStroke(this.draw, stroke, this.userID, this.currStrokeID, 1)\n    this.currStrokeID += 1\n    this.currentPath.timeEnd = this.getTime()\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    this.updatePaths(paths, this.currentPath)\n    this.currentPath.addToGroup(this.sketchGroup)\n  }\n}","export default __webpack_public_path__ + \"static/media/paper.64f19b60.png\";","export default __webpack_public_path__ + \"static/media/pencil1loop.e5fcd29b.mp3\";","export default __webpack_public_path__ + \"static/media/pencil2loop.1d70b1af.mp3\";","export default __webpack_public_path__ + \"static/media/pencil3loop.f85ab838.mp3\";","import React, { Component } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { Howl, Howler } from 'howler'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport FileSaver from 'file-saver'\nimport SVG from 'svg.js'\nimport 'svg.filter.js'\n\nimport { Topbar } from './topbar'\nimport Sketch from './sketch'\nimport Paper from './assets/paper.png'\nimport Pencil1 from './assets/pencil1loop.mp3'\nimport Pencil2 from './assets/pencil2loop.mp3'\nimport Pencil3 from './assets/pencil3loop.mp3'\nimport './sketchpage.css'\n\nexport default class SketchPage extends Component {\n    constructor(props) {\n        super(props)\n        this.testicles = React.createRef();\n        this.state = {\n            sketchMode: 'draw',\n            currSoundCount: 0,\n            currStroke: this.props.currStroke,\n            currColor: '#D4AAAA',\n            currStrokeSize: 4,\n            snackbarOpen: false\n        }\n        this.drawing = false;\n        this.sketchSounds = [new Howl({ src: [Pencil1], loop: true }),\n        new Howl({ src: [Pencil2], loop: true }),\n        new Howl({ src: [Pencil3], loop: true })]\n        this.setBindings()\n    }\n\n    setBindings() {\n        this.verifyJSON = this.verifyJSON.bind(this)\n        this.drawMode = this.drawMode.bind(this)\n        this.colorMode = this.colorMode.bind(this)\n        this.eraseMode = this.eraseMode.bind(this)\n        this.moveMode = this.moveMode.bind(this)\n        this.clear = this.clear.bind(this)\n        this.undo = this.undo.bind(this)\n        this.redo = this.redo.bind(this)\n        this.changeColor = this.changeColor.bind(this)\n        this.changeStrokeSize = this.changeStrokeSize.bind(this)\n    }\n\n    componentDidMount() {\n        let width = document.getElementById('sketchpage').clientWidth\n        let height = document.getElementById('sketchpage').clientHeight\n        if (isMobile) {\n            this.draw = SVG('svg').size(width, height)\n            this.background = this.draw.image(Paper, width, height)\n        } else {\n            this.draw = SVG('svg').size('100%', '100%')\n            this.background = this.draw.image(Paper, width, height)\n        }\n        this.background.scale(5).hide()\n        let svg = document.getElementById('svg').getElementsByTagName('svg')[0]\n\n        // Uses SVG filters to create a pencil texture \n        this.pencilTexture = new SVG.Filter()\n        this.pencilTexture.turbulence(1.5, 1, 0, \"noStitch\", \"fractalNoise\").result(\"f1\")\n        this.pencilTexture.colorMatrix(\"matrix\", \"0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 2.8\").result(\"f2\")\n        this.pencilTexture.composite(\"SourceGraphic\", \"f2\", \"in\").result(\"f3\")\n        this.pencilTexture.turbulence(1.8, 3, 0, \"noStitch\", \"fractalNoise\").result(\"noise\")\n        this.pencilTexture.displacementMap(\"f3\", \"\", 2.5, \"R\", \"G\").result(\"f4\")\n        //\n\n        this.primarySketch = new Sketch(this.draw, svg, this.pencilTexture)\n        this.ServerSketch = new Sketch(this.draw,svg,this.pencilTexture)\n        this.ServerSketch = this.ServerSketch.serialize()\n        this.primSket = this.primarySketch\n\n        window.addEventListener('resize', () => {\n            this.primarySketch.updateDimensions()\n        })\n\n        window.addEventListener('keyup', (e) => this.handleKeyUp(e))\n        window.addEventListener('keydown', (e) => this.handleKeyDown(e))\n        svg.addEventListener('touchmove', (e) => {\n            e.preventDefault()\n        })\n    }\n\n    handleMouseDown(e) {\n        // this.currentlyEditing = true\n        this.prevX = e.clientX\n        this.prevY = e.clientY\n        if (this.state.sketchMode === 'erase') {\n            this.primarySketch.erase(e.clientX, e.clientY)\n            // this.sketchEdit('erase')\n        }\n        else if (this.state.sketchMode === 'move') {\n            if (!this.moving && this.primarySketch.startMove(e)) {\n                this.moving = true\n                document.body.style.cursor = 'grabbing'\n                this.primarySketch.continueLineWithEvent(e, 'move')\n            }\n        }\n        else if (this.state.sketchMode === 'draw') {\n            let count = Math.floor(Math.random() * Math.floor(3))\n            this.sketchSounds[count].play()\n            this.setState({ currSoundCount: count })\n            this.drawing = true\n            this.primarySketch.startPath(this.state.currColor, this.state.currStrokeSize, this.state.paperTextureSwitch)\n            this.primarySketch.continueLineWithEvent(e, 'draw')\n        }\n        else if (this.state.sketchMode === 'color') {\n            this.primarySketch.color(e.clientX, e.clientY, this.state.currColor)\n            // this.sketchEdit('color')\n        }\n    }\n\n    handleMove(e) {\n        if (this.drawing) {\n            this.changeStrokeVolume(e)\n            this.primarySketch.continueLineWithEvent(e, 'draw')\n        }\n        else if (this.moving) {\n            this.primarySketch.continueLineWithEvent(e, 'move')\n        }\n        else if (this.state.sketchMode !== 'draw') {\n            this.hoverStroke(e)\n        }\n        e.persist()\n        this.prevMouseEvent = e\n    }\n\n    handleMouseUp(e, method) {\n        // this.currentlyEditing = false\n        if (e.type === 'mouseup') {\n            if (this.state.sketchMode === 'move' && this.moving && !this.drawing) {\n                this.moving = false\n                document.body.style.cursor = 'grab'\n                // this.sketchEdit('move')\n            }\n            else if (this.state.sketchMode === 'draw') { // drawing mode\n                for (let i = 0; i < 3; i++) {\n                    this.handleMove(e) // Draw dot at the end for smoothing\n                }\n                if (this.drawing) {\n                    this.sketchSounds[this.state.currSoundCount].stop()\n                    this.drawing = false\n                    this.primarySketch.finishPath()\n                    // this.sketchEdit('draw')\n                }\n            }\n        }\n    }\n\n    handleKeyUp(e) { }\n\n    handleKeyDown(e) {\n        if (e.keyCode === 90 && (e.ctrlKey || e.metaKey) && e.shiftKey) {\n            this.primarySketch.redo()\n            // this.sketchEdit('redo')\n        } else if (e.keyCode === 90 && (e.ctrlKey || e.metaKey)) {\n            this.primarySketch.undo()\n            // this.sketchEdit('undo')\n        }\n    }\n\n    hoverStroke(e) {\n        let selected = this.primarySketch.select(e.clientX, e.clientY)\n        if (typeof selected !== 'undefined') {\n            if (typeof this.currHoveredStroke !== 'undefined' && this.currHoveredStroke.idStroke !== selected[1].idStroke) {\n                this.currHoveredStroke.opacity = 1\n                this.currHoveredStroke.highlight()\n            }\n            this.currHoveredStroke = selected[1]\n            this.currHoveredStroke.opacity = 0.1\n            this.currHoveredStroke.highlight()\n        }\n        else {\n            if (typeof this.currHoveredStroke !== 'undefined') {\n                this.currHoveredStroke.opacity = 1\n                this.currHoveredStroke.highlight()\n            }\n        }\n    }\n\n    /**\n     * Switches between the draw, erase, and move modes\n     */\n    mode() {\n        if (this.state.sketchMode === 'draw') this.eraseMode()\n        else if (this.state.sketchMode === 'erase') this.moveMode()\n        else if (this.state.sketchMode === 'move') this.drawMode()\n    }\n\n    drawMode() {\n        this.setState({ sketchMode: 'draw' })\n        document.body.style.cursor = 'auto'\n        if (typeof(this.currHoveredStroke) !== \"undefined\") {\n            this.currHoveredStroke.opacity = 1\n            this.currHoveredStroke.highlight()\n        }\n    }\n\n    colorMode() {\n        this.setState({ sketchMode: 'color' })\n        document.body.style.cursor = 'cell'\n    }\n\n    eraseMode() {\n        this.setState({ sketchMode: 'erase' })\n        document.body.style.cursor = 'no-drop'\n    }\n\n    moveMode() {\n        this.setState({ sketchMode: 'move' })\n        document.body.style.cursor = 'grab'\n    }\n\n    clear() {\n        if (this.primarySketch.clear()) {\n            this.primarySketch.updateDimensions()\n            // this.sketchEdit('clear')\n        }\n    }\n\n    undo() { \n        this.primarySketch.undo()\n        // this.sketchEdit('undo')\n    }\n    redo() { \n        this.primarySketch.redo() \n        // this.sketchEdit('redo')\n    }\n\n    changeColor(color) {\n        this.setState({ currColor: color.hex})\n    }\n\n    changeStrokeSize(size) {\n        this.setState({ currStrokeSize: size})\n    }\n\n    /**\n    * Download current sketch as svg file\n    */\n    download() {\n        this.setState({ paperTextureSwitch: false })\n        this.background.hide()\n        //convert svg to blob\n        let svg = document.getElementById('svg').getElementsByTagName('svg')[0]\n        let serializer = new XMLSerializer()\n        let svgString = serializer.serializeToString(svg)\n        let blob = new Blob([svgString], { type: \"image/svg+xml\" })\n        //download\n        FileSaver.saveAs(blob, \"img.svg\")\n    }\n\n    /**\n     * Import local SVG file\n     * @param {*} input \n     */\n    import(input) {\n        const sketch = this.primarySketch\n        let file = input.files[0]\n        if (file.name.endsWith('svg')) {\n            const promise = new Promise((resolve) => {\n                const reader = new FileReader()\n                reader.onload = function () {\n                    resolve(reader.result)\n                }\n                reader.readAsText(file)\n            })\n            promise.then(img => {\n                let newSvg = sketch.draw.svg(img)\n                let svgHolder = newSvg.children()[3]\n                svgHolder.each(function(i, children) {\n                    if (this.type === 'rect' && this.node.attributes.fill.value === \"none\") {\n                        this.remove()\n                    }\n                    else {\n                        sketch.addImportedStroke(this)\n                    }\n                })\n                svgHolder.node.parentNode.removeChild(svgHolder.node)\n            })\n        }\n        else {\n            this.setState({snackbarOpen: true})\n        }\n    }\n\n    /**\n    * Dynamically changes the stroke volume based on stroke speed\n    */\n    changeStrokeVolume(e) {\n        let currX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX\n        let currY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY\n        clearTimeout(this.timeout)\n        this.timeout = setTimeout(function () { Howler.mute(true) }, 50)\n        let displacement = Math.sqrt(Math.pow(this.prevX - currX, 2) + Math.pow(this.prevY - currY, 2))\n        this.prevX = currX\n        this.prevY = currY\n        let vol = Math.round(Math.min(1, displacement / 10) * 10) / 10\n        if (vol < 0.1) { vol = 0 }\n        if (vol < 0.3) { vol = 0.2 }\n        else if (vol < 0.7) { vol = 0.5 }\n        else { vol = 0.8 }\n        Howler.mute(false)\n        this.sketchSounds[this.state.currSoundCount].fade(\n            this.sketchSounds[this.state.currSoundCount].volume(), vol, 100\n        )\n    }\n\n    verifyJSON() {\n        try {\n            let json = JSON.parse(this.props.currStrokeCode)\n            this.primarySketch.addPathFromCode(json)\n        }\n        catch (err) {\n            this.setState({ snackbarOpen: true })\n        }\n    }\n\n\n    render() {\n        return (\n            <div id=\"sketchpage\" style={{height:'100%'}}>\n                <Topbar verifyJSON={this.verifyJSON} \n                    drawMode={this.drawMode} \n                    colorMode={this.colorMode}\n                    eraseMode={this.eraseMode} \n                    moveMode={this.moveMode} \n                    undo={this.undo} \n                    redo={this.redo} \n                    clear={this.clear} \n                    changeColor={this.changeColor}\n                    changeStrokeSize={this.changeStrokeSize}/>\n                <div id=\"svg\" style={{height:'100%'}}\n                    onMouseDown={(e) => this.handleMouseDown(e)}\n                    onMouseMove={(e) => this.handleMove(e)}\n                    onMouseLeave={(e) => this.handleMouseUp(e, 'mouse')}\n                    onMouseUp={(e) => this.handleMouseUp(e, 'mouse')}\n                    onTouchCancel={(e) => this.handleMouseUp(e, 'mobile')}\n                    onTouchEnd={(e) => this.handleMouseUp(e, 'mobile')}\n                    onTouchMove={(e) => this.handleMove(e)}\n                    onTouchStart={(e) => this.handleMouseDown(e)}>\n                </div>\n                <Snackbar open={this.state.snackbarOpen} autoHideDuration={2000} onClose={() => this.setState({ snackbarOpen: false })}>\n                    <MuiAlert severity=\"error\" elevation={6} variant=\"filled\">\n                        SVG code invalid!\n                    </MuiAlert>\n                </Snackbar>\n            </div>\n        )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SketchPage from './homepage/sketchpage/sketchpage'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <SketchPage />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}