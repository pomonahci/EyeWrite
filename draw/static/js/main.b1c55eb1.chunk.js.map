{"version":3,"sources":["homepage/sketchpage/colorpicker.js","homepage/sketchpage/topbar.js","homepage/sketchpage/path.js","homepage/sketchpage/importedstroke.js","homepage/sketchpage/sketch.js","homepage/sketchpage/assets/paper.png","homepage/sketchpage/assets/pencil1loop.mp3","homepage/sketchpage/assets/pencil2loop.mp3","homepage/sketchpage/assets/pencil3loop.mp3","homepage/sketchpage/sketchpage.js","reportWebVitals.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","r","g","b","a","handleClick","setState","handleClose","handleChange","rgb","props","handleColorChange","styles","reactCSS","main","float","padding","width","height","borderRadius","background","this","swatch","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","style","onClick","onChange","React","Component","Topbar","changeMode","_","newMode","mode","handleStrokeSizeChange","size","strokeSize","changeStrokeSize","changeColor","id","ToggleButtonGroup","className","value","exclusive","aria-label","ToggleButton","drawMode","Tooltip","title","colorMode","eraseMode","moveMode","import","document","getElementById","name","type","required","IconButton","undo","redo","clear","download","Slider","defaultValue","aria-labelledby","step","valueLabelDisplay","min","max","Path","initialCoords","draw","idCreator","idStroke","status","idMovedFrom","created","timeStart","timeEnd","pencilTextureToggle","pencilTexture","pathCoords","svgPath","opacity","options","rendered","erased","movedFrom","drawn","polyline","fill","stroke","filter","coords","cloneDeep","x","y","push","plot","i","length","dmove","remove","sketchGroup","add","index","xy","str","pathCoordsAtIndex","cp1x","cp1y","cp2x","cp2y","skip1","skip2","path","smoothCoords","serializedPath","ImportedStroke","msg","node","outerHTML","strokeCopy","console","log","attr","Sketch","svg","clearedSketches","group","currentPath","undoIndex","clearUndoIndex","prevMouseLocation","currMouseLocation","beganHighlighting","userID","currStrokeID","originalWidth","getWidth","originalHeight","getHeight","updateDimensions","animationfinished","newPaths","paths","newPath","setPaths","slice","sketchpad","clientWidth","clientHeight","n","toString","d","Date","addZero","getHours","getMinutes","getSeconds","getMilliseconds","serialized","getPaths","serialize","serializedSketch","deserialize","hasprettyStroke","scaleSketch","undefined","addToGroupSmoothed","bbox","snoopHeight","votebar","getClientRects","scale","Math","transform","cx","cy","relative","scaleX","scaleY","sketchType","text","move","xScaleFactor","yScaleFactor","updateOrigin","scaleFactor","targetPath","addToGroup","mouseX","mouseY","selected","select","updatePaths","setColor","clientX","clientY","rect","getBoundingClientRect","Number","isNaN","closest_distances","getClosestDistanceDrawnSVG","getClosestDistanceImportedSVG","min_distance","apply","indexOf","distances","sqrt","boundingRect","event","startsWith","changedTouches","newTargetPath","svgHolder","getHTML","children","getTime","highlight","saveData","concat","hide","show","webcamX","webcamY","addPoint","moveBy","json","strokeList","peekHighlighted","interaction","clearInterval","intvl","intvlTime","convertToMillisec","startPath","setInterval","time","l","split","parseInt","SketchPage","sketchMode","currSoundCount","currStroke","currColor","currStrokeSize","snackbarOpen","drawing","sketchSounds","Howl","src","Pencil1","loop","Pencil2","Pencil3","setBindings","verifyJSON","bind","isMobile","SVG","image","Paper","getElementsByTagName","Filter","turbulence","result","colorMatrix","composite","displacementMap","primarySketch","window","addEventListener","e","handleKeyUp","handleKeyDown","preventDefault","prevX","prevY","erase","moving","startMove","body","continueLineWithEvent","count","floor","random","play","paperTextureSwitch","changeStrokeVolume","hoverStroke","persist","prevMouseEvent","method","handleMove","stop","finishPath","updateStrokeCode","JSON","stringify","keyCode","ctrlKey","metaKey","shiftKey","currHoveredStroke","hex","svgString","XMLSerializer","serializeToString","blob","Blob","FileSaver","saveAs","input","sketch","file","files","endsWith","Promise","resolve","reader","FileReader","onload","readAsText","then","img","each","attributes","addImportedStroke","parentNode","removeChild","currX","touches","currY","clearTimeout","timeout","setTimeout","Howler","mute","displacement","pow","vol","round","fade","volume","parse","currStrokeCode","addPathFromCode","err","onMouseDown","handleMouseDown","onMouseMove","onMouseLeave","handleMouseUp","onMouseUp","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","Snackbar","open","autoHideDuration","onClose","severity","elevation","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.b1c55eb1.chunk.js","sourcesContent":["import React from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nexport class ColorPicker extends React.Component {\n    state = {\n        displayColorPicker: false,\n        color: {\n            r: '0',\n            g: '0',\n            b: '0',\n            a: '1',\n        }\n    };\n\n    handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n\n    handleClose = () => {\n        this.setState({ displayColorPicker: false })\n    };\n\n    handleChange = (color) => {\n        this.setState({ color: color.rgb })\n        this.props.handleColorChange(color)\n    };\n\n    render() {\n\n        const styles = reactCSS({\n            'default': {\n                main: {\n                    float: 'left',\n                    padding: '10px'\n                },\n                color: {\n                    width: '36px',\n                    height: '14px',\n                    borderRadius: '2px',\n                    background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\n                },\n                swatch: {\n                    padding: '5px',\n                    background: '#fff',\n                    borderRadius: '1px',\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                    display: 'inline-block',\n                    cursor: 'pointer'\n                },\n                popover: {\n                    position: 'absolute',\n                    zIndex: '2',\n                },\n                cover: {\n                    position: 'fixed',\n                    top: '0px',\n                    right: '0px',\n                    bottom: '0px',\n                    left: '0px',\n                },\n            },\n        });\n\n        return (\n            <div style={styles.main}>\n                <div style={styles.swatch} onClick={this.handleClick}>\n                    <div style={styles.color} />\n                </div>\n                {this.state.displayColorPicker ? <div style={styles.popover}>\n                    <div style={styles.cover} onClick={this.handleClose} />\n                    <SketchPicker color={this.state.color} onChange={this.handleChange} />\n                </div> : null}\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport CreateIcon from '@material-ui/icons/Create';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PanToolIcon from '@material-ui/icons/PanTool';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport Slider from '@material-ui/core/Slider';\nimport { ColorPicker } from './colorpicker';\nimport './topbar.css'\n\nexport class Topbar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mode: \"draw\",\n            color: {\n                r: '0',\n                g: '0',\n                b: '0',\n                a: '1',\n              },\n            strokeSize: 4\n        }\n    }\n\n    changeMode = (_, newMode) => {\n        this.setState({ mode: newMode })\n    }\n\n    handleStrokeSizeChange = (_, size) => {\n        this.setState({ strokeSize: size })\n        this.props.changeStrokeSize(size)\n    }\n\n    handleColorChange = (color) => {\n        this.setState({ color: color.rgb })\n        this.props.changeColor(color)\n    }\n\n    render() {\n        return (\n            <div id=\"topbar\">\n                <ColorPicker handleColorChange={this.handleColorChange}/>\n                <ToggleButtonGroup className=\"float-btn\" value={this.state.mode} exclusive onChange={this.changeMode} aria-label=\"sketch mode\">\n                    <ToggleButton onClick={() => this.props.drawMode()} value=\"draw\" aria-label=\"draw mode\">\n                        <Tooltip title=\"Draw mode\">\n                            <CreateIcon />\n                        </Tooltip>\n                    </ToggleButton>\n                    <ToggleButton onClick={() => this.props.colorMode()} value=\"color\" aria-label=\"color mode\">\n                        <Tooltip title=\"Color mode\">\n                            <PaletteIcon />\n                        </Tooltip>\n                    </ToggleButton>\n                    <ToggleButton onClick={() => this.props.eraseMode()} value=\"erase\" aria-label=\"erase mode\">\n                        <Tooltip title=\"Erase mode\">\n                            <DeleteIcon />\n                        </Tooltip>\n                    </ToggleButton>\n                    <ToggleButton onClick={() => this.props.moveMode()} value=\"move\" aria-label=\"move mode\">\n                        <Tooltip title=\"Move mode\">\n                            <PanToolIcon style={{ height: 20 }} /></Tooltip>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n                <Tooltip title=\"Import SVG\">\n                    <label className=\"import-label\">\n                        <input id=\"input\" onChange={() => this.props.import(document.getElementById(\"input\"))} \n                            onClick={() => document.getElementById(\"input\").value=null} name=\"img\" type=\"file\" required />\n                        <AddPhotoAlternateIcon />\n                    </label>\n                </Tooltip>\n                <Tooltip title=\"Undo\">\n                    <IconButton onClick={() => this.props.undo()} color=\"secondary\" aria-label=\"undo stroke\">\n                        <UndoIcon />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Redo\">\n                    <IconButton onClick={() => this.props.redo()} color=\"secondary\" aria-label=\"redo stroke\">\n                        <RedoIcon />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Clear drawing\">\n                    <IconButton onClick={() => this.props.clear()} color=\"secondary\" aria-label=\"clear drawing\">\n                        <DeleteSweepIcon />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Download drawing\">\n                    <IconButton onClick={() => this.props.download()} color=\"secondary\" aria-label=\"download drawing\">\n                        <GetAppIcon />\n                    </IconButton>\n                </Tooltip>\n                <div className=\"stroke-size-slider\">\n                <Slider\n                    defaultValue={4}\n                    aria-labelledby=\"stroke size slider\"\n                    step={1}\n                    valueLabelDisplay=\"auto\"\n                    min={1}\n                    max={100}\n                    color=\"secondary\"\n                    onChange={this.handleStrokeSizeChange}\n                /></div>\n            </div>\n        )\n    }\n}","import _ from \"lodash\"\nimport 'svg.filter.js'\n\n/** Single stroke of a sketch. SVG implementation. */\nexport default class Path {\n  /**\n   * @param {string} color - the color of the path\n   * @param {number} width - the width of the path\n   * @param {object} initialCoords - the sketch that this path is contained in\n   * @param {object} draw - the svg draw object used to render this path\n   * @param {string} idCreator - the creator ID of the user who created the path\n   * @param {number} idStroke - the stroke ID of the path (starts at 1 and increments as each stroke is added)\n   * @param {number} status - number indicating the current status of the stroke (1 = 'drawn', 2 = 'erased', 3 = 'moved')\n   * @param {number} idMovedFrom - the id of the stroke this stroke was moved from (not moved = 0)\n   * @param {number} created - number indicating how the stroke was created (1 = 'drawn', 2 = 'moved', 3 = 'copied')\n   * @param {string} timeStart - time when interaction with this stroke started (hh:mm:ss:ms)\n   * @param {string} timeEnd - time when interaction with this stroke ended (hh:mm:ss:ms)\n   * @param {boolean} pencilTextureToggle - boolean to indicate whether the stroke has a pencil texture\n   * @param {object} pencilTexture - the pencil texture SVG filter\n   * pencil texture modified from https://heredragonsabound.blogspot.com/2020/02/creating-pencil-effect-in-svg.html\n   */\n  constructor(color, width, initialCoords, draw, idCreator, idStroke, status, idMovedFrom,\n    created, timeStart, timeEnd, pencilTextureToggle, pencilTexture) {\n    this.pathCoords = initialCoords  // Flattened array of points, stored as [x1, y1, x2, y2, ...]\n    this.svgPath = null\n\n    this.color = color\n    this.width = width\n    this.opacity = 1\n    this.draw = draw\n    this.options = { width: this.width, color: this.color, opacity: this.opacity }\n    this.rendered = true\n    this.erased = false\n    this.idCreator = idCreator\n    this.idStroke = idStroke\n    this.status = status \n    this.idMovedFrom = idMovedFrom \n    this.movedFrom = null\n    this.created = created \n    this.timeStart = timeStart\n    this.timeEnd = timeEnd\n    this.pencilTextureToggle = pencilTextureToggle\n    this.pencilTexture = pencilTexture\n    this.drawn = true\n\n    this.svgPath = this.draw.polyline(this.pathCoords).fill('none')\n        .stroke(this.options)\n    if (this.pencilTextureToggle) { // if stroke is on paper texture, adopt a pencil texture\n      this.svgPath.filter(this.pencilTexture)\n    }\n  }\n\n  /**\n   * Converts this path into a plain object.\n   * @return {object} object containing keys:\n   *\n   */\n  serialize() {\n    let coordscopy = _.cloneDeep(this.pathCoords)\n    return {\n      coords: coordscopy,\n      color: this.color,\n      width: this.width,\n      idCreator: this.idCreator,\n      idStroke: this.idStroke,\n      status: this.status,\n      idMovedFrom: this.idMovedFrom,\n      created: this.created,\n      timeStart: this.timeStart,\n      timeEnd: this.timeEnd,\n      pencilTextureToggle: this.pencilTextureToggle\n    }\n  }\n\n  /**\n   *\n   * @param {object} serializedPath\n   * @param {object} draw\n   * @return {Path} the deserialized path\n   */\n  static deserialize(serializedPath, draw, pencilTexture) {\n    return new Path(serializedPath.color, serializedPath.width, serializedPath.coords, draw, \n      serializedPath.idCreator, serializedPath.idStroke, serializedPath.status, serializedPath.idMovedFrom,\n      serializedPath.created, serializedPath.timeStart, serializedPath.timeEnd, serializedPath.pencilTextureToggle, pencilTexture)\n  }\n\n  /**\n   * Adds a point to the path and renders it.\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  addPoint(x, y) {\n    this.pathCoords.push(x)\n    this.pathCoords.push(y)\n    this.svgPath.plot(this.pathCoords)\n  }\n  /**\n   * Moves the path by a certain displacement.\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  moveBy(x, y) {\n    for (let i = 0; i < this.pathCoords.length; i++) {\n      this.pathCoords[i] = (i % 2 === 0) ? this.pathCoords[i] + x : this.pathCoords[i] + y\n    }\n    this.svgPath.dmove(x, y)\n  }\n\n  /**\n   * \"Highlights\" the path by changing its opacity.\n   */\n  highlight() {\n    this.svgPath.opacity(this.opacity)\n  }\n\n  /**\n   * Changes the color of the path\n   * @param {string} color \n   */\n  setColor(color) {\n    this.color = color\n    this.svgPath.stroke({color: color})\n  }\n\n  /**\n   * Stop rendering this path on the SVG.\n   */\n  remove(status) {\n    this.svgPath.remove()\n    this.rendered = false\n    this.status = status\n    if (status === 2) {\n      this.erased = true\n    }\n  }\n\n  /**\n   * Adds this path to the group so it can be rendered.\n   *\n   * @param {object} sketchGroup\n   */\n  addToGroup(sketchGroup) {\n    sketchGroup.add(this.svgPath)\n    this.rendered = true\n    this.status = 1\n  }\n\n  pathCoordsAtIndex(coords, index, xy) {\n    return coords[index * 2 + xy]\n  }\n\n  smoothCoords(coords) {\n    let str = ''\n    str += ('M ' + this.pathCoordsAtIndex(coords, 0, 0) + ' ' + this.pathCoordsAtIndex(coords, 0, 1) + ' ')\n    let skip1 = true\n    let skip2 = false\n    let cp1x, cp1y, cp2x, cp2y\n    for (let i = 0; i < coords.length / 2 - 1; i++) {\n      if (skip1) {\n        cp1x = this.pathCoordsAtIndex(coords, i, 0) // x\n        cp1y = this.pathCoordsAtIndex(coords, i, 1) // y\n        skip1 = false\n        skip2 = true\n      }\n      if (skip2) {\n        cp2x = this.pathCoordsAtIndex(coords, i, 0) // x\n        cp2y = this.pathCoordsAtIndex(coords, i, 1) // y\n\n        skip1 = false\n        skip2 = false\n      } else {\n        str += 'C ' + cp1x + ' ' + cp1y + ' ' + cp2x + ' ' + cp2y + ' ' +\n          this.pathCoordsAtIndex(coords, i, 0) + ' ' + this.pathCoordsAtIndex(coords, i, 1) + ' '\n        skip1 = true\n        skip2 = false\n      }\n    }\n    return str\n  }\n\n  addToGroupSmoothed(sketchGroup) {\n    this.svgPath.remove()\n    let path = this.draw.path(this.smoothCoords(this.pathCoords))\n        .fill('none')\n        .stroke(this.options)\n    if (this.pencilTextureToggle) {\n      path.filter(this.pencilTexture)\n    }\n    this.svgPath = path\n    sketchGroup.add(path)\n  }\n}\n","import _ from \"lodash\"\n\nexport default class ImportedStroke {\n    /**\n     * @param {object} draw - the svg draw object used to render this stroke\n     * @param {object} stroke - the stroke object\n     * @param {string} idCreator - the creator ID of the user who created the path\n     * @param {number} idStroke - the stroke ID of the path (starts at 1 and increments as each stroke is added)\n     * @param {number} status - number indicating the current status of the stroke (1 = 'drawn', 2 = 'erased', 3 = 'moved')\n     */\n    constructor(draw, stroke, idCreator, idStroke, status) {\n        this.type = stroke.type\n        this.drawn = false\n        this.draw = draw\n        this.stroke = stroke\n        this.rendered = true\n        this.idCreator = idCreator\n        this.idStroke = idStroke\n        this.status = status\n        this.opacity = 1\n        this.movedFrom = null\n    }\n\n    /**\n     * Converts this path into a plain object.\n     * @return {object} object containing keys:\n     *\n     */\n    serialize() {\n        return {\n            msg: 'placeholder text',\n            type: this.type,\n            status: this.status\n        }\n    }\n\n    getHTML() {\n        return this.stroke.node.outerHTML\n    }\n\n    copy() {\n        let strokeCopy = _.cloneDeep(this.stroke)\n        return new ImportedStroke(this.draw, strokeCopy, this.idCreator, this.idStroke, this.status)\n    }\n\n    /**\n     * Moves the path by a certain displacement.\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n    moveBy(x, y) {\n        this.stroke.dmove(x, y)\n    }\n\n    /**\n     * \"Highlights\" the path by changing its opacity.\n     */\n    highlight() {\n        this.stroke.opacity(this.opacity)\n    }\n\n    /**\n     * Changes the color of the stroke\n     * @param {string} color \n     */\n    setColor(color) {\n        this.color = color\n        console.log(this.stroke.attr('stroke'))\n        console.log(this.stroke.attr('fill'))\n        if (this.stroke.attr('stroke') !== \"#000000\" && this.stroke.attr('stroke') !== \"none\") {\n            this.stroke.stroke({color: color})\n        }\n        if (this.stroke.attr('fill') !== \"#000000\" && this.stroke.attr('fill') !== \"none\" ) {\n            this.stroke.fill({color: color})\n        }\n    }\n\n    /**\n     * Stop rendering this path on the SVG.\n     */\n    remove(status) {\n        this.stroke.remove()\n        this.rendered = false\n        this.status = status\n        if (status === 2) {\n            this.erased = true\n        }\n    }\n\n    /**\n     * Adds this path to the group so it can be rendered.\n     *\n     * @param {object} sketchGroup\n     */\n    addToGroup(sketchGroup) {\n        sketchGroup.add(this.stroke)\n        this.rendered = true\n        this.status = 1\n    }\n}","/** A collection of path. Keeps track of a undo and redo buffer. */\nimport Path from './path'\nimport ImportedStroke from './importedstroke'\n\nexport default class Sketch {\n  /**\n   * @param {object} draw - the SVG draw object\n   * @param {object} svg - the svg element\n   * @param {object} pencilTexture - the pencil texture SVG filter\n   */\n  constructor(draw, svg, pencilTexture) {\n    // this.paths = []\n    this.clearedSketches = [[]] // Stores current sketch and all cleared sketches for undoing and redoing clears.\n    this.sketchGroup = draw.group()\n    this.draw = draw\n    this.currentPath = null\n    this.undoIndex = 0\n    this.clearUndoIndex = 0\n    this.svg = svg\n    this.prevMouseLocation = null\n    this.currMouseLocation = null\n    this.beganHighlighting = false\n    this.userID = null\n    this.currStrokeID = 1\n    this.pencilTexture = pencilTexture\n\n    this.originalWidth = this.getWidth()\n    this.originalHeight = this.getHeight()\n    this.updateDimensions()\n    this.animationfinished = true\n  }\n\n  getPaths() {\n    return this.clearedSketches[this.clearedSketches.length - this.clearUndoIndex - 1]\n  }\n\n  setPaths(newPaths) {\n    this.clearedSketches[this.clearedSketches.length - this.clearUndoIndex - 1] = newPaths\n  }\n\n  updatePaths(paths, newPath) {\n    paths.push(newPath)\n    this.setPaths(paths)\n    this.clearedSketches = this.clearedSketches.slice(0, this.clearedSketches.length - this.clearUndoIndex)\n    this.undoIndex = 0\n    this.clearUndoIndex = 0\n  }\n\n  getWidth() {\n    let sketchpad = document.getElementById('sketchpad')\n    if (sketchpad !== null) {\n      return sketchpad.clientWidth\n    }\n    return this.svg.clientWidth\n  }\n\n  getHeight() {\n    let sketchpad = document.getElementById('sketchpad')\n    if (sketchpad !== null) {\n      return sketchpad.clientHeight\n    }\n    return this.svg.clientHeight\n  }\n\n  addZero(x, n) {\n    while (x.toString().length < n) {\n      x = \"0\" + x;\n    }\n    return x;\n  }\n\n  getTime() {\n    let d  = new Date()\n    let h = this.addZero(d.getHours(), 2)\n    let m = this.addZero(d.getMinutes(), 2)\n    let s = this.addZero(d.getSeconds(), 2)\n    let ms = this.addZero(d.getMilliseconds(), 3)\n    return h + \":\" + m + \":\" + s + \":\" + ms\n  }\n\n  /**\n   * Serialize a path into an array of objects\n   * @return {Array}\n   */\n  serialize() {\n    let serialized = []\n    let paths = this.getPaths()\n    for (let i = 0; i < paths.length - this.undoIndex; i++) {\n      serialized.push(paths[i].serialize())\n    }\n    return serialized\n  }\n\n  /**\n   * Loads in a serialized sketch.\n   * @param {Object} serializedSketch\n   */\n  loadSketch(serializedSketch) {\n    this.remove()\n    this.setPaths([])\n    for (let serializedPath of serializedSketch) {\n      if (serializedPath.status === 1) {\n        let path = Path.deserialize(serializedPath, this.draw, this.pencilTexture)\n        if (path !== null ) {\n          path.hasprettyStroke = false\n          this.getPaths().push(path)\n        }\n      }\n    }\n  }\n\n  displayLoadedSketch(scaleSketch) {\n    scaleSketch = scaleSketch === undefined ? true : scaleSketch\n    this.sketchGroup.remove()\n    this.sketchGroup = this.draw.group()\n    if (!scaleSketch) {\n      this.updateDimensions()\n    }\n\n    for (let path of this.getPaths()) {\n      path.addToGroupSmoothed(this.sketchGroup)\n    }\n    let width = this.getWidth()\n    let height = this.getHeight()\n\n    if (!scaleSketch) {\n      return\n    }\n\n    // scale snooped sketch to fit.\n    let bbox = this.sketchGroup.bbox()\n\n    let snoopHeight = height\n    let votebar = document.getElementById('votebar')\n    if (votebar !== null) {\n      snoopHeight = snoopHeight - votebar.getClientRects()[0].height\n    }\n    let scale = Math.min(width / bbox.width, snoopHeight / bbox.height)\n\n    this.sketchGroup.transform({ // Center peeked sketch\n      x: width / 2 - bbox.cx,\n      y: snoopHeight / 2 - bbox.cy,\n      relative: true,\n    })\n    this.sketchGroup.transform({\n      scaleX: scale * 0.8, // Include some padding\n      scaleY: scale * 0.8,\n    })\n  }\n\n  /**\n   * Used on the adminpage to indicate which sketches are blank or peek-only\n   */\n  displayText(sketchType) {\n    var text\n    if (sketchType === \"peek\") {\n      text = this.draw.text(\"User has only peeked so far.\")\n      text.move(20,70)\n    }\n    else {\n      text = this.draw.text(\"User has not sketched \\nnor peeked so far.\")\n      text.move(40,70)\n    }\n    this.sketchGroup = text\n  }\n\n  /**\n   * Reset the origin to the center of image and scale sketch to fit screen, assuming it fit in original width and\n   * height.\n   */\n  updateDimensions() {\n    let xScaleFactor = (this.getWidth() / this.originalWidth)\n    let yScaleFactor = (this.getHeight() / this.originalHeight)\n\n    this.updateOrigin()\n    let scaleFactor = Math.min(xScaleFactor, yScaleFactor)\n\n    this.sketchGroup.transform({\n      scale: scaleFactor,\n      cx: 0,\n      cy: 0,\n    })\n  }\n\n  updateOrigin() {\n    this.sketchGroup.transform({\n      scale: 1,\n    })\n    this.sketchGroup.transform({\n      x: this.getWidth() / 2,\n      y: this.getHeight() / 2,\n    })\n  }\n\n  /**\n   * Undo an operation (erase, move, draw, clear)\n   */\n  undo() {\n    if (this.undoIndex < this.getPaths().length) {\n      let targetPath = this.getPaths()[this.getPaths().length - this.undoIndex - 1]\n      if (targetPath.status === 2 && !targetPath.rendered && targetPath.erased) { // undo erase\n        targetPath.addToGroup(this.sketchGroup)\n      }\n      else if (targetPath.rendered && targetPath.movedFrom !== null && !targetPath.movedFrom.rendered) { //undo move\n        targetPath.remove(3)\n        targetPath.movedFrom.addToGroup(this.sketchGroup)\n      }\n      else { //undo draw\n        targetPath.remove(2)\n      }\n      this.undoIndex += 1\n    } else if (this.clearUndoIndex < this.clearedSketches.length - 1) { // Undoing a clear\n      this.undoIndex = 0\n      this.clearUndoIndex += 1\n      for (let path of this.getPaths()) {\n        if (path.rendered) {\n          path.addToGroup(this.sketchGroup)\n        }\n      }\n    } else {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Redo an operation (erase, move, draw, clear)\n   */\n  redo() {\n    if (this.undoIndex > 0) {\n      let targetPath = this.getPaths()[this.getPaths().length - this.undoIndex]\n      if (targetPath.rendered && targetPath.erased) { // redo erase\n        targetPath.remove()\n      }\n      else if (!targetPath.rendered && targetPath.movedFrom !== null && targetPath.movedFrom.rendered) { //redo move\n        targetPath.addToGroup(this.sketchGroup) \n        targetPath.movedFrom.remove(3)\n      }\n      else { //redo draw\n        targetPath.addToGroup(this.sketchGroup)\n      }\n      this.undoIndex -= 1\n    } else if (this.clearUndoIndex > 0) { //redo clear\n      this.remove()\n      this.clearUndoIndex -= 1\n      this.undoIndex = this.getPaths().length\n    } else {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Clears all strokes\n   */\n  clear() {\n    if (this.getPaths().length === 0) {\n      return false\n    }\n    this.setPaths(this.getPaths().slice(0, this.getPaths().length - this.undoIndex))\n    this.clearedSketches = this.clearedSketches.slice(0, this.clearedSketches.length - this.clearUndoIndex)\n    this.clearUndoIndex = 0\n    this.undoIndex = 0\n    this.remove()\n    this.clearedSketches.push([])\n    return true\n  }\n\n  /**\n   * Visually removes the sketch group\n   */\n  remove() {\n    this.sketchGroup.remove()\n    this.sketchGroup = this.draw.group()\n    this.updateDimensions()\n  }\n\n  /**\n   * Erases a stroke by making a copy of the stroke and hiding both\n   */\n  erase(mouseX, mouseY) {\n    let selected = this.select(mouseX, mouseY)\n    if (typeof selected !== 'undefined') {\n      let paths = selected[0]\n      let targetPath = selected[1]\n      targetPath.remove(2)\n      this.updatePaths(paths, targetPath)\n      return true\n    }\n    return false\n  }\n\n\n  color(mouseX, mouseY, color) {\n    let selected = this.select(mouseX, mouseY)\n    if (typeof selected !== 'undefined') {\n      let targetPath = selected[1]\n      targetPath.setColor(color)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Selects the stroke closest to mouse position\n   */\n  select(clientX, clientY) {\n    if (this.getPaths().length > 0) {\n      let rect = this.svg.getBoundingClientRect()\n      let transform = this.sketchGroup.transform()\n      let mouseX = ((clientX - rect.left) - transform.x) / transform.scaleX\n      let mouseY = ((clientY - rect.top) - transform.y) / transform.scaleY\n      this.prevMouseLocation = [mouseX, mouseY]\n      this.currMouseLocation = [mouseX, mouseY]\n      if (!Number.isNaN(mouseX) && !Number.isNaN(mouseY)) {\n        let buffer = 40\n        let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n        let closest_distances = []\n        for (let i = 0; i < paths.length; i++) {\n          if (paths[i].status === 1) {\n            if (paths[i].drawn) {\n              closest_distances.push(this.getClosestDistanceDrawnSVG(paths[i].pathCoords, mouseX, mouseY))\n            }\n            else {\n              closest_distances.push(this.getClosestDistanceImportedSVG(\n                paths[i].stroke.node.getBoundingClientRect(), clientX, clientY)\n              )\n            }\n          }\n          else {\n            closest_distances.push(9999)\n          }\n        }\n        let min_distance = Math.min.apply(null, closest_distances)\n        if (min_distance < buffer) {\n          return [paths, paths[closest_distances.indexOf(min_distance)]]\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a list of stroke coords, find the minimum distance between any point in the list and mouse position\n   */\n  getClosestDistanceDrawnSVG(coords, mouseX, mouseY) {\n    var distances = []\n    for (let i = 0; i < coords.length; i+=2) {\n      let x = coords[i] - mouseX\n      let y = coords[i+1] - mouseY\n      distances.push(Math.sqrt(x*x + y*y))\n    }\n    return Math.min.apply(null, distances)\n  }\n\n  getClosestDistanceImportedSVG(boundingRect, mouseX, mouseY) {\n    var distances = []\n    for (let width = 0; width < boundingRect.width; width++) {\n      for (let height = 0; height < boundingRect.height; height++) {\n        let x = boundingRect.x + width - mouseX\n        let y = boundingRect.y + height - mouseY\n        distances.push(Math.sqrt(x*x + y*y))\n      }\n    }\n    return Math.min.apply(null, distances)\n  }\n\n  /**\n   * Starts moving the stroke closest to mouse position by \n   * - Making a copy of the stroke\n   * - Hiding the original stroke\n   * - Setting the copied stroke as the one targetted for moving\n   */\n  startMove(event) {\n    if (event.type.startsWith('touch')) {\n      event = event.changedTouches[0]\n    }\n    let selected = this.select(event.clientX, event.clientY)\n    if (typeof selected !== 'undefined') {\n      // makes (unrendered) copy of target path for future undo and adds to stack \n      let paths = selected[0]\n      let targetPath = selected[1]\n      let newTargetPath\n      if (targetPath.drawn) {\n        newTargetPath = Path.deserialize(targetPath.serialize(), this.draw, this.pencilTexture)\n        newTargetPath.addToGroupSmoothed(this.sketchGroup) // necessary, otherwise copied path off position\n      }\n      else {\n        let svgHolder = this.draw.svg(targetPath.getHTML())\n        newTargetPath = new ImportedStroke(this.draw, svgHolder.children()[3], this.userID, this.currStrokeID, 1)\n        newTargetPath.addToGroup(this.sketchGroup)\n      }\n      newTargetPath.timeStart = this.getTime()\n      newTargetPath.idStroke = this.currStrokeID\n      newTargetPath.pencilTextureToggle = targetPath.pencilTextureToggle\n      newTargetPath.created = 2\n      newTargetPath.idMovedFrom = targetPath.idStroke\n      newTargetPath.movedFrom = targetPath\n      targetPath.remove(3)\n      this.currStrokeID += 1\n      newTargetPath.opacity = 0.1\n      newTargetPath.highlight()\n      this.updatePaths(paths, newTargetPath)\n      this.currentPath = newTargetPath\n      return true\n    }\n    return false\n  }\n\n  endMove() {\n    this.currentPath.opacity = 1\n    this.currentPath.highlight()\n    this.currentPath.timeEnd = this.getTime()\n    let saveData = this.prevMouseLocation.concat(this.currMouseLocation)\n    this.currMouseLocation = null\n    return saveData\n  }\n\n  hide() {\n    this.sketchGroup.hide()\n  }\n\n  show() {\n    this.sketchGroup.show()\n  }\n\n  /**\n   * Depending on mode, adds a point onto the current or moves path\n   * @param {object} event\n   * @param {string} mode\n   */\n  continueLineWithEvent(event, mode, webcamX, webcamY) {\n    let rect = this.svg.getBoundingClientRect()\n    let x\n    let y\n    let transform = this.sketchGroup.transform()\n    // Transform coordinates on svg div to center origin coordinates of sketchGroup\n    if (event === null) {\n      x = ((webcamX - rect.left) - transform.x) / transform.scaleX\n      y = ((webcamY - rect.top) - transform.y) / transform.scaleY\n    }\n    else {\n      if (event.type.startsWith('touch')) {\n        event = event.changedTouches[0]\n      }\n      x = ((event.clientX - rect.left) - transform.x) / transform.scaleX\n      y = ((event.clientY - rect.top) - transform.y) / transform.scaleY\n    }\n\n    if (mode === 'draw') {\n      this.currentPath.addPoint(x, y)\n    }\n    else if (mode === 'move') {\n      if (this.currMouseLocation !== null) {\n        this.currentPath.moveBy(x - this.currMouseLocation[0], y - this.currMouseLocation[1])\n        this.currMouseLocation = [x, y]\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {string} color\n   * @param {number} width\n   * @param {boolean} pencilTextureToggle\n   */\n  startPath(color, width, pencilTextureToggle) {\n    this.currentPath = new Path(color, width, [], this.draw, this.userID, this.currStrokeID, 1, 0, 1, \"\", \"\", pencilTextureToggle, this.pencilTexture)\n    this.currStrokeID += 1\n    this.currentPath.addToGroup(this.sketchGroup)\n    this.currentPath.timeStart = this.getTime()\n  }\n\n  /**\n   * Adds the current path to the list of other paths.\n   */\n  finishPath() {\n    this.currentPath.timeEnd = this.getTime()\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    this.updatePaths(paths, this.currentPath)\n    this.currentPath.addToGroupSmoothed(this.sketchGroup)\n    //this.currentPath = null\n  }\n\n  /**\n   * Add new path based on JSON specifications\n   * @param {*} json \n   */\n  addPathFromCode(json) {\n    let newTargetPath = Path.deserialize(json, this.draw, this.pencilTexture)\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    let targetPath = this.currentPath\n    newTargetPath.idStroke = this.currStrokeID\n    newTargetPath.pencilTextureToggle = targetPath.pencilTextureToggle\n    newTargetPath.created = 2\n    this.currStrokeID += 1\n    newTargetPath.idMovedFrom = targetPath.idStroke\n    newTargetPath.movedFrom = targetPath\n    newTargetPath.hasprettyStroke = false\n    targetPath.remove(3)\n    newTargetPath.addToGroupSmoothed(this.sketchGroup) // necessary, otherwise copied path off position\n    newTargetPath.timeStart = this.getTime()\n    this.updatePaths(paths, newTargetPath)\n    this.currentPath = newTargetPath\n  }\n\n  /**\n   * Highlight the stroke closest to mouse position\n   */\n  highlightPeekedStroke(event) {\n    let selected = this.select(event.clientX, event.clientY)\n    if (typeof selected !== 'undefined') {\n      selected[1].highlight()\n      this.beganHighlighting = true\n    }\n  }\n\n  /**\n   * Returns all highlighted strokes\n   */\n  getHighlightedPeekedStrokes() {\n    let strokeList = []\n    for (let path of this.getPaths()) {\n      if (path.peekHighlighted) {\n        strokeList.push(path)\n      }\n    }\n    return strokeList\n  }\n\n  /**\n   * Create a pseudo animation for drawing by gradually creating a path with same coordinates as most recent path, then deleting that path\n   * @param {string} interaction\n   */\n  animateNewPeekedStroke(interaction) {\n    if (interaction !== 'sketch') {\n      return\n    }\n    let paths = this.getPaths()\n    let path = paths[paths.length - 1]\n    if (path.created === 1 && path.status === 1) {\n      if (!this.animationfinished) {\n        this.currentPath.remove(2)\n        path.addToGroup(this.sketchGroup)\n        this.animationfinished = true\n        clearInterval(this.intvl)\n      }\n      this.animationfinished = false\n      path.remove(2)\n      let totalTime = this.convertToMillisec(path.timeEnd) - this.convertToMillisec(path.timeStart)\n      let intvlTime = totalTime/(path.pathCoords.length/2)\n      let i = 0\n      this.startPath(path.color, path.width, path.pencilTextureToggle, this.pencilTexture)\n      this.intvl = setInterval(() => {\n        if (i >= path.pathCoords.length) {\n          this.currentPath.addToGroupSmoothed(this.sketchGroup)\n          this.currentPath.remove(2)\n          path.addToGroup(this.sketchGroup)\n          this.animationfinished = true\n          clearInterval(this.intvl)\n        }\n        else {\n          this.currentPath.addPoint(path.pathCoords[i], path.pathCoords[i+1])\n          i += 2\n        }\n      }, intvlTime)\n    }\n  }\n\n  /**\n   * Converts time with format (hh:mm:ss:ms) into milliseconds\n   * @param {string} time \n   */\n  convertToMillisec(time){\n    let l = time.split(\":\")\n    return (parseInt(l[0]*3600000) + parseInt(l[1]*60000) + parseInt(l[2]*1000) + parseInt(l[3]))\n  }\n\n  addImportedStroke(stroke) {\n    this.currentPath = new ImportedStroke(this.draw, stroke, this.userID, this.currStrokeID, 1)\n    this.currStrokeID += 1\n    this.currentPath.timeEnd = this.getTime()\n    let paths = this.getPaths().slice(0, this.getPaths().length - this.undoIndex)\n    this.updatePaths(paths, this.currentPath)\n    this.currentPath.addToGroup(this.sketchGroup)\n  }\n}","export default __webpack_public_path__ + \"static/media/paper.64f19b60.png\";","export default __webpack_public_path__ + \"static/media/pencil1loop.e5fcd29b.mp3\";","export default __webpack_public_path__ + \"static/media/pencil2loop.1d70b1af.mp3\";","export default __webpack_public_path__ + \"static/media/pencil3loop.f85ab838.mp3\";","import React, { Component } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { Howl, Howler } from 'howler'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport FileSaver from 'file-saver'\nimport SVG from 'svg.js'\nimport 'svg.filter.js'\n\nimport { Topbar } from './topbar'\nimport Sketch from './sketch'\nimport Paper from './assets/paper.png'\nimport Pencil1 from './assets/pencil1loop.mp3'\nimport Pencil2 from './assets/pencil2loop.mp3'\nimport Pencil3 from './assets/pencil3loop.mp3'\nimport './sketchpage.css'\n\nexport default class SketchPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            sketchMode: 'draw',\n            currSoundCount: 0,\n            currStroke: this.props.currStroke,\n            currColor: '#000000',\n            currStrokeSize: 4,\n            snackbarOpen: false\n        }\n        this.drawing = false;\n        this.sketchSounds = [new Howl({ src: [Pencil1], loop: true }),\n        new Howl({ src: [Pencil2], loop: true }),\n        new Howl({ src: [Pencil3], loop: true })]\n        this.setBindings()\n    }\n\n    setBindings() {\n        this.verifyJSON = this.verifyJSON.bind(this)\n        this.drawMode = this.drawMode.bind(this)\n        this.colorMode = this.colorMode.bind(this)\n        this.eraseMode = this.eraseMode.bind(this)\n        this.moveMode = this.moveMode.bind(this)\n        this.clear = this.clear.bind(this)\n        this.undo = this.undo.bind(this)\n        this.redo = this.redo.bind(this)\n        this.download = this.download.bind(this)\n        this.import = this.import.bind(this)\n        this.changeColor = this.changeColor.bind(this)\n        this.changeStrokeSize = this.changeStrokeSize.bind(this)\n    }\n\n    componentDidMount() {\n        let width = document.getElementById('sketchpage').clientWidth\n        let height = document.getElementById('sketchpage').clientHeight\n        if (isMobile) {\n            this.draw = SVG('svg').size(width, height)\n            this.background = this.draw.image(Paper, width, height)\n        } else {\n            this.draw = SVG('svg').size('100%', '100%')\n            this.background = this.draw.image(Paper, width, height)\n        }\n        this.background.scale(5).hide()\n        let svg = document.getElementById('svg').getElementsByTagName('svg')[0]\n\n        // Uses SVG filters to create a pencil texture \n        this.pencilTexture = new SVG.Filter()\n        this.pencilTexture.turbulence(1.5, 1, 0, \"noStitch\", \"fractalNoise\").result(\"f1\")\n        this.pencilTexture.colorMatrix(\"matrix\", \"0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 2.8\").result(\"f2\")\n        this.pencilTexture.composite(\"SourceGraphic\", \"f2\", \"in\").result(\"f3\")\n        this.pencilTexture.turbulence(1.8, 3, 0, \"noStitch\", \"fractalNoise\").result(\"noise\")\n        this.pencilTexture.displacementMap(\"f3\", \"\", 2.5, \"R\", \"G\").result(\"f4\")\n        //\n\n        this.primarySketch = new Sketch(this.draw, svg, this.pencilTexture)\n\n        window.addEventListener('resize', () => {\n            this.primarySketch.updateDimensions()\n        })\n\n        window.addEventListener('keyup', (e) => this.handleKeyUp(e))\n        window.addEventListener('keydown', (e) => this.handleKeyDown(e))\n        svg.addEventListener('touchmove', (e) => {\n            e.preventDefault()\n        })\n    }\n\n    handleMouseDown(e) {\n        this.prevX = e.clientX\n        this.prevY = e.clientY\n        if (this.state.sketchMode === 'erase') {\n            this.primarySketch.erase(e.clientX, e.clientY)\n        }\n        else if (this.state.sketchMode === 'move') {\n            if (!this.moving && this.primarySketch.startMove(e)) {\n                this.moving = true\n                document.body.style.cursor = 'grabbing'\n                this.primarySketch.continueLineWithEvent(e, 'move')\n            }\n        }\n        else if (this.state.sketchMode === 'draw') {\n            let count = Math.floor(Math.random() * Math.floor(3))\n            this.sketchSounds[count].play()\n            this.setState({ currSoundCount: count })\n            this.drawing = true\n            this.primarySketch.startPath(this.state.currColor, this.state.currStrokeSize, this.state.paperTextureSwitch)\n            this.primarySketch.continueLineWithEvent(e, 'draw')\n        }\n        else if (this.state.sketchMode === 'color') {\n            this.primarySketch.color(e.clientX, e.clientY, this.state.currColor)\n        }\n    }\n\n    handleMove(e) {\n        if (this.drawing) {\n            this.changeStrokeVolume(e)\n            this.primarySketch.continueLineWithEvent(e, 'draw')\n        }\n        else if (this.moving) {\n            this.primarySketch.continueLineWithEvent(e, 'move')\n        }\n        else if (this.state.sketchMode !== 'draw') {\n            this.hoverStroke(e)\n        }\n        e.persist()\n        this.prevMouseEvent = e\n    }\n\n    handleMouseUp(e, method) {\n        if (e.type === 'mouseup') {\n            if (this.state.sketchMode === 'move' && this.moving && !this.drawing) {\n                this.moving = false\n                document.body.style.cursor = 'grab'\n            }\n            else if (this.state.sketchMode === 'draw') { // drawing mode\n                for (let i = 0; i < 3; i++) {\n                    this.handleMove(e) // Draw dot at the end for smoothing\n                }\n                if (this.drawing) {\n                    this.sketchSounds[this.state.currSoundCount].stop()\n                    this.drawing = false\n                    this.primarySketch.finishPath()\n                }\n            }\n            if (this.primarySketch.currentPath !== null) {\n                this.props.updateStrokeCode(JSON.stringify(this.primarySketch.currentPath.serialize()), 'there')\n            }\n            else {\n                this.props.updateStrokeCode(\"Start drawing a SVG to begin! -->\")\n            }\n        }\n    }\n\n    handleKeyUp(e) { }\n\n    handleKeyDown(e) {\n        if (e.keyCode === 90 && (e.ctrlKey || e.metaKey) && e.shiftKey) {\n            this.primarySketch.redo()\n        } else if (e.keyCode === 90 && (e.ctrlKey || e.metaKey)) {\n            this.primarySketch.undo()\n        }\n    }\n\n    hoverStroke(e) {\n        let selected = this.primarySketch.select(e.clientX, e.clientY)\n        if (typeof selected !== 'undefined') {\n            if (typeof this.currHoveredStroke !== 'undefined' && this.currHoveredStroke.idStroke !== selected[1].idStroke) {\n                this.currHoveredStroke.opacity = 1\n                this.currHoveredStroke.highlight()\n            }\n            this.currHoveredStroke = selected[1]\n            this.currHoveredStroke.opacity = 0.1\n            this.currHoveredStroke.highlight()\n        }\n        else {\n            if (typeof this.currHoveredStroke !== 'undefined') {\n                this.currHoveredStroke.opacity = 1\n                this.currHoveredStroke.highlight()\n            }\n        }\n    }\n\n    /**\n     * Switches between the draw, erase, and move modes\n     */\n    mode() {\n        if (this.state.sketchMode === 'draw') this.eraseMode()\n        else if (this.state.sketchMode === 'erase') this.moveMode()\n        else if (this.state.sketchMode === 'move') this.drawMode()\n    }\n\n    drawMode() {\n        this.setState({ sketchMode: 'draw' })\n        document.body.style.cursor = 'auto'\n        if (typeof(this.currHoveredStroke) !== \"undefined\") {\n            this.currHoveredStroke.opacity = 1\n            this.currHoveredStroke.highlight()\n        }\n    }\n\n    colorMode() {\n        this.setState({ sketchMode: 'color' })\n        document.body.style.cursor = 'cell'\n    }\n\n    eraseMode() {\n        this.setState({ sketchMode: 'erase' })\n        document.body.style.cursor = 'no-drop'\n    }\n\n    moveMode() {\n        this.setState({ sketchMode: 'move' })\n        document.body.style.cursor = 'grab'\n    }\n\n    clear() {\n        if (this.primarySketch.clear()) {\n            this.primarySketch.updateDimensions()\n        }\n    }\n\n    undo() { this.primarySketch.undo() }\n    redo() { this.primarySketch.redo() }\n\n    changeColor(color) {\n        this.setState({ currColor: color.hex})\n    }\n\n    changeStrokeSize(size) {\n        this.setState({ currStrokeSize: size})\n    }\n\n    /**\n    * Download current sketch as svg file\n    */\n    download() {\n        this.setState({ paperTextureSwitch: false })\n        this.background.hide()\n        //convert svg to blob\n        let svg = document.getElementById('svg').getElementsByTagName('svg')[0]\n        let serializer = new XMLSerializer()\n        let svgString = serializer.serializeToString(svg)\n        let blob = new Blob([svgString], { type: \"image/svg+xml\" })\n        //download\n        FileSaver.saveAs(blob, \"img.svg\")\n    }\n\n    /**\n     * Import local SVG file\n     * @param {*} input \n     */\n    import(input) {\n        const sketch = this.primarySketch\n        let file = input.files[0]\n        if (file.name.endsWith('svg')) {\n            const promise = new Promise((resolve) => {\n                const reader = new FileReader()\n                reader.onload = function () {\n                    resolve(reader.result)\n                }\n                reader.readAsText(file)\n            })\n            promise.then(img => {\n                let newSvg = sketch.draw.svg(img)\n                let svgHolder = newSvg.children()[3]\n                svgHolder.each(function(i, children) {\n                    if (this.type === 'rect' && this.node.attributes.fill.value === \"none\") {\n                        this.remove()\n                    }\n                    else {\n                        sketch.addImportedStroke(this)\n                    }\n                })\n                svgHolder.node.parentNode.removeChild(svgHolder.node)\n            })\n        }\n        else {\n            this.setState({snackbarOpen: true})\n        }\n    }\n\n    /**\n    * Dynamically changes the stroke volume based on stroke speed\n    */\n    changeStrokeVolume(e) {\n        let currX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX\n        let currY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY\n        clearTimeout(this.timeout)\n        this.timeout = setTimeout(function () { Howler.mute(true) }, 50)\n        let displacement = Math.sqrt(Math.pow(this.prevX - currX, 2) + Math.pow(this.prevY - currY, 2))\n        this.prevX = currX\n        this.prevY = currY\n        let vol = Math.round(Math.min(1, displacement / 10) * 10) / 10\n        if (vol < 0.1) { vol = 0 }\n        if (vol < 0.3) { vol = 0.2 }\n        else if (vol < 0.7) { vol = 0.5 }\n        else { vol = 0.8 }\n        Howler.mute(false)\n        this.sketchSounds[this.state.currSoundCount].fade(\n            this.sketchSounds[this.state.currSoundCount].volume(), vol, 100\n        )\n    }\n\n    verifyJSON() {\n        try {\n            let json = JSON.parse(this.props.currStrokeCode)\n            this.primarySketch.addPathFromCode(json)\n        }\n        catch (err) {\n            this.setState({ snackbarOpen: true })\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"sketchpage\" style={{height:'100%'}}>\n                <Topbar verifyJSON={this.verifyJSON} \n                    import={this.import} \n                    drawMode={this.drawMode} \n                    colorMode={this.colorMode}\n                    eraseMode={this.eraseMode} \n                    moveMode={this.moveMode} \n                    undo={this.undo} \n                    redo={this.redo} \n                    clear={this.clear} \n                    download={this.download}\n                    changeColor={this.changeColor}\n                    changeStrokeSize={this.changeStrokeSize}/>\n                <div id=\"svg\" style={{height:'100%'}}\n                    onMouseDown={(e) => this.handleMouseDown(e)}\n                    onMouseMove={(e) => this.handleMove(e)}\n                    onMouseLeave={(e) => this.handleMouseUp(e, 'mouse')}\n                    onMouseUp={(e) => this.handleMouseUp(e, 'mouse')}\n                    onTouchCancel={(e) => this.handleMouseUp(e, 'mobile')}\n                    onTouchEnd={(e) => this.handleMouseUp(e, 'mobile')}\n                    onTouchMove={(e) => this.handleMove(e)}\n                    onTouchStart={(e) => this.handleMouseDown(e)}>\n                </div>\n                <Snackbar open={this.state.snackbarOpen} autoHideDuration={2000} onClose={() => this.setState({ snackbarOpen: false })}>\n                    <MuiAlert severity=\"error\" elevation={6} variant=\"filled\">\n                        SVG code invalid!\n                    </MuiAlert>\n                </Snackbar>\n            </div>\n        )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SketchPage from './homepage/sketchpage/sketchpage.js'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <SketchPage />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}